#ifndef __TTREESBLOCK_H#define __TTREESBLOCK_H#include "TClassTypes.h"#include "TFlags.h"#include "TChecks.h"#include "TTreeStore.h"#include "TTree.h"#include "TVArray.h"#include "TLeafMap.h"#include "TQuartetSet.h"#include "TClusterList.h"#include "TSplitSet.h"#define TTREESBLOCK_FLAG_ROOTED  	0x0001#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreesBlock ___#endifclass TTreesBlock : public TObject, protected TFlags{	public:		enum TreeSetType		{			kAll,			kActive,			kSelected		};				enum		{			kRooted = 0x0001,			kLeafSetsUpdated = 0x0002		};				TTreesBlock (const bool rooted = true);		TTreesBlock (const TTreesBlock& treesBlock);		virtual ~TTreesBlock (void);		virtual void							AddTree (const TTree& tree);		virtual ClassType						Class (void) const { return (kTTreesBlockClass); };		virtual TObject*						Clone (void) const { return (new TTreesBlock (*this)); };		virtual void							Copy (const TObject& obj);		virtual const TItemSet&					GetSelection (void) const { return (fSelected); };		virtual unsigned int						GetCurTreeNumber (void) const { return (fCurTreeNumber); };		virtual unsigned int						GetTrees (const bool selected = false) const { return (selected ? fSelected.GetItems () : fTreeStore.GetItems ()); };		virtual bool							GetIthItem (const unsigned int i, const bool selected = false) const { CHECK_ (0 < i); return (i <= GetTrees (selected)); };				virtual bool							GetIthTree (const unsigned int i, TTree& tree, const bool selected = false) const; 		virtual bool							GetIthTreeLeafSet (const unsigned int i, const TLeafSet*& leafSet, const bool selected = false) const { return (fTreeStore.GetIthTreeLeafSet (convert (i, selected), leafSet)); }; 		virtual bool							GetIthTreeName (const unsigned int i, const TTreeName*& name, const bool selected = false) const { return (fTreeStore.GetIthTreeName (convert (i, selected), name)); };		virtual bool							GetIthTreeWeight (const unsigned int i, double& weight, const bool selected = false) const { return (fTreeStore.GetIthTreeWeight (convert (i, selected), weight)); };		virtual unsigned int					GetNumberDifferentTrees (const bool selected = false) const;				virtual unsigned long 					GetInternalBranches (const bool selected = false) const;		virtual unsigned long long				GetResolvedTriplets (const bool selected = false) const;		virtual unsigned long long				GetResolvedQuartets (const bool selected = false) const;				virtual const TLeafSet&					GetLeafSet (const bool intersection, const bool selected) const;		virtual const TTreeStyle&				GetTreeStyle (void) const { return (fTreeStyle); };				virtual unsigned int						GetLeaves (const bool intersection, const bool selected) const { return (GetLeafSet (intersection, selected).GetLeaves ()); };		virtual bool							IsBinary (const bool selected = false) const;										virtual bool							IsEmpty (const bool selected = false) const { return (!GetTrees (selected)); };		virtual bool							IsEqual (const TObject& obj) const;		virtual bool							IsIthSelected (const unsigned int i) const { return (fSelected.IsItem (i)); };		virtual bool							IsRooted (void) const { return (IsFlag (kRooted)); };				virtual bool							IsEqualLeafSets (const bool selected = false) const;		virtual void 							MapLeaves (const TLeafMap& leafMap);		TTreesBlock&					operator = (const TTreesBlock& treesBlock);				virtual void 							Root (void) { CHECK_ (IsEmpty ()); SetFlag (kRooted, true); };		virtual void 							UnRoot (void) { CHECK_ (IsEmpty ()); SetFlag (kRooted, false); };				virtual void							SelectAll (const bool select = true);		virtual void							SelectIth (const unsigned int i, const bool select = true);		virtual void							SelectSet (TItemSet itemSet, const bool select = true);		virtual void							SetTreeStyle (const TTreeStyle& treeStyle) { fTreeStyle = treeStyle; };				virtual void							SetCurTreeNumber (const unsigned int tree) { CHECK_ (tree <= GetTrees ()); fCurTreeNumber = tree; };		virtual void							SetSelection (const TItemSet& itemSet);				virtual ostream&						Write (ostream& o) const { return (fTreeStore.Write (o)); };	protected:				virtual void							clearSets (void) const { };		virtual unsigned int						convert (const unsigned int i, const bool selected) const { return (i ? (selected ? fSelected.IthItem (i) : i) : 0); };		virtual bool							getIthTree (const unsigned int i, TTree& tree) const;		virtual void							upDateLeafSets (void) const;		virtual void 							writeSelection (void) const;						TTreeStore								fTreeStore;				TItemSet								fSelected; 		// set of all trees which are selected		unsigned int								fCurTreeNumber;		TTreeStyle								fTreeStyle;						TLeafSet								fIntersectionAll;		TLeafSet								fIntersectionSelected;		TLeafSet								fUnionAll;		TLeafSet								fUnionSelected;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TSourceTreesBlock ___#endifclass TSourceTreesBlock : public TTreesBlock{	class TReplicates	{		public:			TReplicates (void);			virtual ~TReplicates (void);						virtual void										SetStartNextReplicate (const unsigned int startReplicate) { CHECK_ (fVArray[GetReplicates () - 1] < startReplicate); fVArray.AddItem (startReplicate); };			virtual void										Clear (void) { fVArray.ReSize (1); };			virtual void 										DeletedFromReplicate (const unsigned int replicate, const unsigned int trees);			virtual unsigned int									GetStartIthReplicate (const unsigned int replicate) const { return (0 < replicate && replicate <= GetReplicates () ? fVArray[replicate - 1] : 0); };			virtual unsigned int									GetReplicates (void) const { return (fVArray.Size ()); };				protected:			TVArray<unsigned int>									fVArray;	};	public:		enum		{			kBootstrap = 0x0010		};				TSourceTreesBlock (const bool rooted = true);		TSourceTreesBlock (const TSourceTreesBlock& sourceTreesBlock);		virtual ~TSourceTreesBlock (void);		virtual void							AddTree (const TTree& tree);		virtual ClassType						Class (void) const { return (kTSourceTreesBlockClass); };		virtual TObject*						Clone (void) const { return (new TSourceTreesBlock (*this)); };		virtual void 							CondenseTrees (const CondenseTreesOptionType option, const bool bootstrap = false);		virtual void							Copy (const TObject& obj);		virtual const TClusterList*				GetClusterList (void) const { return (fClusterList); };		virtual const TSplitSet*				GetSplitSet (void) const { return (fSplitSet); };		virtual unsigned int						GetTrees (const bool selected = false) const { return (selected ? fSelectedActive.GetItems () : fActive.GetItems ()); };		virtual double							GetTotalInformation (const bool selected = false) const;		virtual const TLeafSet&					GetLeafSet (const bool intersection, const bool selected) const;		virtual const TLeafSet&					GetPrunedLeafSet (void) const { return (fPruned); };		virtual unsigned int						GetPrunedLeaves (void) const { return (GetPrunedLeafSet ().GetLeaves ()); };				virtual unsigned int       				GetReplicates (void) const { return (fReplicates.GetReplicates ()); };				virtual TLeafSet						GetTotalLeafSet (const bool intersection, const bool pruned) const;		virtual unsigned int						GetTotalLeaves (const bool intersection, const bool pruned) const { return (GetTotalLeafSet (intersection, pruned).GetLeaves ()); };		virtual unsigned int						GetTotalTrees (void) const { return (fTreeStore.GetItems ()); };		virtual TItemSet						GetActive (void) const { return (fActive); };		virtual double						GetWeight (const bool selected = false) const;		virtual void 							GraftLeafAsOutgroup (const unsigned int leaf);		virtual bool							IsBootstrap (void) const { return (IsFlag (kBootstrap)); };		virtual bool							IsClusterList (void) const { return (fClusterList != NULL); };		virtual bool							IsSplitSet (void) const { return (fSplitSet != NULL); };										virtual bool							IsEqual (const TObject& obj) const;		virtual bool							IsEqualTotalLeafSets (const bool pruned) const { return (GetTotalLeafSet (true, pruned) == GetTotalLeafSet (false, pruned)); };		virtual void 							MapLeaves (const TLeafMap& leafMap);				virtual void							PruneLeaves (const TLeafSet& leafSet);		virtual bool							CanPruneLeaves (const TLeafSet& leafSet);		virtual void 							ReRoot (const unsigned int leaf);		virtual void 							Root (void);				virtual void							SelectSet (TItemSet itemSet, const bool select = true);				virtual void							SetClusterList (const TClusterList* clusterList) const { ((TSourceTreesBlock*)this)->fClusterList = clusterList; };		virtual void							SetSplitSet (const TSplitSet* splitSet) const { ((TSourceTreesBlock*)this)->fSplitSet = splitSet; };		virtual void							SetSelection (const TItemSet& itemSet);		virtual void							SetWeightsTrees (const bool bootstrap = false, const double weight = kDefaultWeight);		virtual void							UnRoot (void);		virtual bool							CanUnRoot (void);			virtual ostream&						WriteClusters (ostream& o, const float limit, const bool writeWeights, const bool writeDifferences) const { CHECK_ (fClusterList); return (fClusterList->Write (o, limit, writeWeights, writeDifferences)); };		virtual ostream&						WriteSplits (ostream& o, const float limit, const bool weight) const { CHECK_ (fSplitSet); fSplitSet->Sort (); return (fSplitSet->WriteAsTable (o, limit, weight)); }; 	protected:				virtual void							clearSets (void) const;		virtual unsigned int						convert (const unsigned int i, const bool selected) const { return (i ? (selected ? fSelectedActive.IthItem (i) : fActive.IthItem (i)) : 0); };		virtual void							deleteInactiveTrees (void);		virtual void							deletePrunedLeaves (void);		virtual bool							getIthTree (const unsigned int i, TTree& tree) const;		virtual void							setActive (const TItemSet& itemSet);		virtual void							setWeightsTrees (const unsigned int first, const unsigned int last, const double weight = kDefaultWeight);		virtual void 							setWeightsTreesIthReplicate (const unsigned int i, const double weight = kDefaultWeight);		virtual void							upDateLeafSets (void) const;		virtual void							writeActive (void) const;			virtual void							writeSelection (void) const;							TItemSet								fActive;        	// set of all trees which are active		TItemSet								fSelectedActive;	// set of all active trees which are selected		TItemSet								fSelectedAll; 		// set of all trees (active or inactive) which are selected				TLeafSet								fPruned;		TLeafSet								fIntersectionActive;		TLeafSet								fUnionActive;				TLeafSet								fLeafSet;						TReplicates								fReplicates;		const TClusterList*						fClusterList;		const TSplitSet*						fSplitSet;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TTREESBLOCK_H