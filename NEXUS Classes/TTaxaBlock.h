#ifndef __TTAXABLOCK_H#define __TTAXABLOCK_H#include "TCladistic.h"#include "TString.h"#include "TNexusName.h"#include "TBTree.h"#include "TVArray.h"#include "TLeafMap.h"class TTranslationTable;#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTaxaBlock ___#endifclass TTaxaBlock : public TCladistic{	friend class TTranslationTable;	public:		TTaxaBlock (void);		TTaxaBlock (const TTaxaBlock& taxaBlock);		virtual ~TTaxaBlock (void);		virtual void							AddLeaf (const TString& leafName) { AddLeaf (leafName, GetLeaves () + 1); };		virtual void							AddLeaf (const TString& leafName, const unsigned int leafNumber);		virtual void							AddLeaves (const TTaxaBlock& taxaBlock);		virtual ClassType						Class (void) const { return (kTTaxaBlockClass); }; 		virtual TObject*						Clone (void) const { return (new TTaxaBlock (*this)); };		virtual void							Copy (const TObject& obj);				virtual void							Clear (void);		virtual const TString&					GetLeafName (const unsigned int leafNumber) const;		virtual unsigned int						GetLeafNumber (const TString& leafName) const;		virtual const TLeafSet&					GetLeafSet (void) const { return (fLeafSet); }; 		virtual unsigned int						GetLeaves (void) const { return (GetLeafSet ().GetLeaves ()); }; 		virtual unsigned int						GetUnionLeaves (const TTaxaBlock& taxaBlock) const; 						virtual HashValue						Hash (void) const { return (fBTree.Hash ()); };						virtual bool							IsEmpty (void) const { return (!GetLeaves ()); };		virtual bool							IsEqual (const TObject& obj) const;		virtual bool							IsEqual (const TTaxaBlock& taxaBlock, const TLeafSet& leafSet) const;				virtual bool							IsLeaf (const TString& leafName) const;		virtual bool							IsLeaf (const unsigned int leafNumber) const { return (GetLeafSet ().IsLeaf (leafNumber)); };		virtual void							InsertLeaf (const TString& leafName, const unsigned int leafNumber);		virtual void							MapLeaves (const TLeafMap& leafMap);		virtual unsigned int 						NextLeaf (void) const { return (fLeafSet.NextLeaf ()); };		TTaxaBlock&								operator = (const TTaxaBlock& taxaBlock);		virtual void							PruneLeaves (const TLeafSet& leafSet);		virtual void 							PruneLeaf (const unsigned int leaf);			virtual ostream&						Write (ostream& o) const { return (Write (o, fLeafSet)); };		virtual ostream&						WriteAsNexus (ostream& o, const TLeafSet& leafSet) const;		virtual ostream&						WriteAsNexus (ostream& o) const { return (WriteAsNexus (o, fLeafSet)); };		virtual ostream&						Write (ostream& o, const TLeafSet& leafSet) const;		virtual ostream&						WriteCharacters (ostream& o) const { return (WriteCharacters (o, fLeafSet)); };		virtual ostream&						WriteCharacters (ostream& o, const TLeafSet& leafSet) const;		virtual void							WriteToLogAsList (const TLeafSet& leafSet) const; 		virtual ostream&						WriteAsList (ostream& o, const TLeafSet& leafSet) const; 			protected:			TBTree									fBTree;		TVArray<TLeafName*>						fArray;		TLeafSet								fLeafSet;		TString									fString;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TTAXABLOCK_H