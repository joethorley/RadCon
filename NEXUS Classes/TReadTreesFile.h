#ifndef __TREADNEXUSFILE_H#define __TREADNEXUSFILE_H#include <iostream.h>#include <sstream.h>#include <exception>#include <ctype.h>#include "TChecks.h"#include "TClassTypes.h"#include "TReadNexusToken.h"#include "TTaxaBlock.h"#include "TTreesBlock.h"#include "TLeafSet.h"#include "TString.h"#include "TTranslationTable.h"#include "TTreesFile.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TReadTreesFile ___#endifclass TReadTreesFile : protected TReadNexusToken{	public:				enum		{			kPredefineLeaves 	= 0x0010,			kMultipleSetsTrees 	= 0x0020		};				TReadTreesFile (istream& i, TString name, TSourceTreesFileList& treesFiles, const bool predefineLeaves = true, const bool multipleSetsTrees = true);		~TReadTreesFile (void);				virtual void								ReadFile (void);			protected:				virtual void								addLeaf (const TString& leaf);		virtual void								addLeafOnTheFly (const TString& leaf);		virtual void								addTree (void);						virtual void								addTreesToList (void);				static NexusBlockType 						getBlockType (const TString& block);		virtual NexusBlockType						curBlockType (void) { return (fCurBlockType); };		virtual bool								isNexusFile (void);		virtual bool								isPhylipFile (void);		virtual NexusBlockType 						nextBlockType (void);				virtual void								nextFileCharacter (void);		virtual char								peekNextFileCharacter (void) { return (fIStream.peek ()); };		virtual void								readNexusFile (void);		virtual void								readPhylipFile (void);				virtual void 								readTaxaBlock (void);				virtual void 								readTaxaBlockLabels (const unsigned int leaves);		virtual unsigned int 							readTaxaBlockDimensions (void);		virtual void  								readTranslationTable (void);		virtual void  								readPhylipTree (void);		virtual void	 							readNexusTree (void);		virtual void	 							readTreeDescription (void);		virtual void 								readTreeCommandComments (void);		virtual void 								readTreeDescriptionComponent (void);		virtual void								readTreesBlock (void);				virtual void								resetTaxaBlock (void);					istream& 									fIStream;		TString										fFileName;		TSourceTreesFileList&						fTreesFiles;		TTaxaBlock*									fCurTaxaBlock;		TTranslationTable*							fCurTranslationTable;		TSourceTreesBlock*							fCurTreesBlock;				NexusBlockType								fCurBlockType;		TTree										fCurTree;				TLeafSet									fLeafSet;		TString										fTreeString;				static char 								fSErrorMsg [];};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif	// __TREADNEXUSFILE_H