#ifndef __TTREESFILE_H#define __TTREESFILE_H#include "TClassTypes.h"#include "TChecks.h"#include "TFlags.h"#include "TTreesBlock.h"#include "TTaxaBlock.h"#include "TLeafMap.h"#include "TDList.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreesFile ___#endifclass TTreesFile : public TObject{		public:		TTreesFile (TTaxaBlock* taxaBlock, TTreesBlock* treesBlock = NULL);		TTreesFile (const TTaxaBlock& taxaBlock, TTreesBlock* treesBlock = NULL);		TTreesFile (const TTreesFile& treesFile);		virtual ~TTreesFile (void);				virtual void							Copy (const TObject& obj);		virtual unsigned int						GetCurTreeNumber (void) const { return (fTreesBlock->GetCurTreeNumber ()); };				virtual const char*						GetProgressBarName (void) const { return (GetName ()); };		virtual const TItemSet&					GetItemSet (void) const { return (fTreesBlock->GetSelection ()); };		virtual bool							GetIthTreeLeafSet (const unsigned int i, const TLeafSet*& leafSet, const bool selected = false) const  { return (fTreesBlock->GetIthTreeLeafSet (i, leafSet, selected)); };		virtual bool							GetIthTreeName (const unsigned int i, const TTreeName*& name, const bool selected = false) const { return (fTreesBlock->GetIthTreeName (i, name, selected)); };		virtual bool							GetIthTreeWeight (const unsigned int i, double& weight, const bool selected = false) const { return (fTreesBlock->GetIthTreeWeight (i, weight, selected)); };		virtual bool							GetIthTree (const unsigned int i, const bool selected = false) const { return (fTreesBlock->GetIthItem (i, selected)); };		virtual bool							GetIthTree (const unsigned int i, TTree& tree, const bool label = true, const bool selected = false) const;		virtual const char*						GetLeafName (const unsigned int leaf) const { return (fTaxaBlock->GetLeafName (leaf).Array ()); };		virtual unsigned int						GetLeafNumber (const char* name) const;		virtual TLeafSet						GetLeafSet (const bool intersection, const bool selected = false) const { return (fTreesBlock->GetLeafSet (intersection, selected)); };		virtual unsigned int						GetLeaves (const bool intersection, const bool selected = false) const  { return (fTreesBlock->GetLeaves (intersection, selected)); };				virtual const TTreeStyle&				GetTreeStyle (void) const { return (fTreesBlock->GetTreeStyle ()); };		virtual const TTaxaBlock&				GetTaxaBlock (void) const { return (*fTaxaBlock); };		virtual const char*						GetName (void) const { return ("Trees File"); };		virtual bool							IsSourceTrees (void) const = 0;		virtual bool							IsConsensusTrees (void) const { return (!IsSourceTrees ()); };   		virtual bool 							IsEqual (const TObject& obj) const;		 		virtual bool							IsEmpty (const bool selected = false) const { return (fTreesBlock->IsEmpty (selected)); };		virtual bool							IsBinary (const bool selected = false) const { return (fTreesBlock->IsBinary (selected)); };				virtual bool							IsEqualLeafSets (const bool selected = false) const { return (fTreesBlock->IsEqualLeafSets (selected)); };		virtual bool							IsIthSelected (const unsigned int i) const { return (fTreesBlock->IsIthSelected (i)); };		virtual bool							IsRooted (void) const { return (fTreesBlock->IsRooted ()); };		virtual bool							IsLeaf (const TString& leafName) const { return (fTaxaBlock->IsLeaf (leafName)); };		virtual bool							IsLeaf (const unsigned int leafNumber) const { return (fTaxaBlock->IsLeaf (leafNumber)); };		virtual void							MapLeaves (const TLeafMap leafMap);		virtual unsigned int						SaveTrees (ostream& o, const bool characters, const bool selected = false) const;		virtual ostream& 						ShowTrees (ostream& o, const TItemSet& itemSet, const bool name = true, const bool selected = false) const;				virtual void							SelectAll (const bool select = true) { fTreesBlock->SelectAll (select); };		virtual void							SelectIth (const unsigned int i, const bool select = true) { fTreesBlock->SelectIth (i, select); };		virtual void							SelectSet (const TItemSet& itemSet, const bool select = true) { fTreesBlock->SelectSet (itemSet, select); };		virtual void							SetCurTreeNumber (const unsigned int tree) { fTreesBlock->SetCurTreeNumber (tree); };		virtual void 							SetItemSet (const TItemSet& itemSet) { fTreesBlock->SetSelection (itemSet); };		virtual void							SetTreeStyle (const TTreeStyle& treeStyle) { fTreesBlock->SetTreeStyle (treeStyle); };				virtual unsigned int						GetTrees (const bool selected = false) const { return (fTreesBlock->GetTrees (selected)); };				virtual ostream&						Write (ostream& o) const;		virtual ostream&						WriteInfoLeaves (ostream& o) const;		virtual ostream&						WriteInfoTrees (ostream& o) const = 0;	protected:		TTaxaBlock* 							fTaxaBlock;		TTreesBlock*							fTreesBlock;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TSourceTreesFile ___#endifclass TSourceTreesFile : public TTreesFile{	public:		TSourceTreesFile (TTaxaBlock* taxaBlock, TSourceTreesBlock* sourceTreesBlock, const char* name = "");		TSourceTreesFile (const TSourceTreesFile&);		virtual ~TSourceTreesFile (void);				virtual void							AddTrees (const TSourceTreesFile& sourceTreesFile);		virtual ClassType 						Class (void) const { return (kTSourceTreesFileClass); };		virtual TObject*						Clone (void) const { return (new TSourceTreesFile (*this)); };		virtual void 							CondenseTrees (const CondenseTreesOptionType option, const bool bootstrap = false);		virtual bool							IsSourceTrees (void) const { return (true); };		virtual bool							IsTotalInformation (void) const { return (IsEqualLeafSets (true) && IsBinary (true)); };		virtual bool							IsClusterList (void) const { return (((const TSourceTreesBlock*)fTreesBlock)->IsClusterList ()); };		virtual const char*						GetName (void) const { return (fName.Array ()); };			virtual const TLeafSet&					GetPrunedLeafSet (void) const { return (((TSourceTreesBlock*)fTreesBlock)->GetPrunedLeafSet ()); };		virtual unsigned int						GetPrunedLeaves (void) const { return (((TSourceTreesBlock*)fTreesBlock)->GetPrunedLeaves ()); };		virtual TLeafSet						GetTotalLeafSet (const bool intersection, const bool pruned) const { return (((const TSourceTreesBlock*)fTreesBlock)->GetTotalLeafSet (intersection, pruned)); };		virtual double							GetTotalInformation (const bool selected = false) const { return (((const TSourceTreesBlock*)fTreesBlock)->GetTotalInformation (selected)); };		virtual unsigned int						GetTotalLeaves (const bool intersection, const bool pruned) const { return (((const TSourceTreesBlock*)fTreesBlock)->GetTotalLeaves (intersection, pruned)); };		virtual unsigned int						GetTotalTrees (void) const { return (((TSourceTreesBlock*)fTreesBlock)->GetTotalTrees ()); };		virtual const TSourceTreesBlock&		GetTreesBlock (void) const { return (*((TSourceTreesBlock*)fTreesBlock)); };		virtual unsigned int						GetUnionLeaves (const TSourceTreesFile& sourceTreesFile) const;		virtual double						GetWeight (const bool selected = false) const { return (((TSourceTreesBlock*)fTreesBlock)->GetWeight (selected)); };		virtual void							GraftLeafAsOutgroup (const TString& leaf);		virtual bool							IsBootstrap (void) const { return (((TSourceTreesBlock*)fTreesBlock)->IsBootstrap ()); };				virtual void 							PruneLeaves (const TLeafSet& leafSet) { ((TSourceTreesBlock*)fTreesBlock)->PruneLeaves (leafSet); };		virtual bool 							CanPruneLeaves (const TLeafSet& leafSet) { return (((TSourceTreesBlock*)fTreesBlock)->CanPruneLeaves (leafSet)); };		virtual void 							ReRoot (const unsigned int leaf) { ((TSourceTreesBlock*)fTreesBlock)->ReRoot (leaf); };		virtual void 							Root (void) { ((TSourceTreesBlock*)fTreesBlock)->Root (); };				virtual void							SetName (const char* name) { fName = name; };							virtual void 							UnRoot (void) { ((TSourceTreesBlock*)fTreesBlock)->UnRoot (); };		virtual bool 							CanUnRoot (void) { return (((TSourceTreesBlock*)fTreesBlock)->CanUnRoot ()); };		virtual void							SetWeightsTrees (const bool bootstrap = false, const double weight = kDefaultWeight) { ((TSourceTreesBlock*)fTreesBlock)->SetWeightsTrees (bootstrap, weight); };			virtual ostream&						WriteClusters (ostream& o, const float limit, const bool writeWeights, const bool writeDifferences) const;		virtual void							WriteClustersToLog (const bool writeWeights, const bool writeDifferences) const;		virtual ostream&						WriteSplits (ostream& o, const float limit, const bool weights) const;		virtual void							WriteSplitsToLog (const bool weights) const;		virtual ostream&						WriteInfoTrees (ostream& o) const;	protected:		TString									fName;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TSourceTreesFileList ___#endifclass TSourceTreesFileList{	public:		TSourceTreesFileList (void);		virtual ~TSourceTreesFileList (void);				virtual void							AddItem (TSourceTreesFile* treesFile) { fList.AddItem (treesFile); }		virtual void							DetachItem (TSourceTreesFile*& treesFile);				virtual bool							IsEmpty (void) const { return (fList.IsEmpty ()); };		virtual unsigned int						GetItems (void) const { return (fList.GetItems ()); };			protected:		TDList									fList;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TConsensusTreesFile ___#endif// uses pointer to TSourceTreesBlock and assumes that does not change during Consensus () functionclass TConsensusTreesFile : public TTreesFile, protected TFlags{		public:		enum		{			kEqualLeafSets = 0x0001		};		TConsensusTreesFile (const TSourceTreesFile& sourceTreesFile);		TConsensusTreesFile (const TConsensusTreesFile& consensusTreesFile);		virtual ~TConsensusTreesFile (void);		virtual ClassType 						Class (void) const { return (kTConsensusTreesFileClass); };		virtual void							Consensus (void); 		virtual const TTreesBlock&				GetTreesBlock (void) const { return (*((TTreesBlock*)fTreesBlock)); };							virtual unsigned int						GetTreesDone (void) const { return (fTreesDone); };		virtual bool							IsSourceTrees (void) const { return (false); };		virtual ostream&						WriteInfoTrees (ostream& o) const;			protected:		virtual void							consensus (VMonitor* monitor);		virtual void							nextTree (void) = 0;		virtual void							addTree (void) = 0;		TTree									fConsensusTree;		TLeafSet								fConsensusLeafSet;				unsigned int								fTreesDone;		double								fWeightsDone;		TLeafMap								fLeafMap;							// assumes that does not change		const TSourceTreesBlock*				fSourceTreesBlock;		TString									fSourceName;		TTree									fCurSourceTree;				TLeafSet								fSourceLeafSet;		unsigned int								fSourceTrees; 		double								fSourceWeights; };#endif	// __TTREESFILE_H