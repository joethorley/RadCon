#ifndef __TTREESTORE_H#define __TTREESTORE_H#include "TChecks.h"#include "TClassTypes.h"#include "TAncestorFunction.h"#include "TItemSet.h"#include "TArry.h"#include "TTree.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreeStore ___#endifclass TTreeStore : public TObject{	public:						TTreeStore (void);		TTreeStore (const TTreeStore& treeStore);		virtual ~TTreeStore (void);						virtual void							AddItem (const TTree& tree);				virtual unsigned int						GetItems (void) const { return (fArry.GetItems ()); };				virtual ClassType						Class (void) const { return (kTTreeStoreClass); };		virtual TObject*						Clone (void) const { return (new TTreeStore (*this)); };		virtual void							Copy (const TObject& obj);				virtual void							DeleteIthItem (const unsigned int i) { fArry.DeleteIthItem (i); };						virtual bool							GetIthAncestorFunction (const unsigned int i, const TAncestorFunction*& anf) const;		virtual bool							GetIthItem (const unsigned int i) const { return (fArry.IthItem (i)); };		virtual bool							GetIthTree (const unsigned int i, TTree& tree) const;		virtual bool							GetIthTreeLeafSet (const unsigned int i, const TLeafSet*& leafSet) const;		virtual bool							GetIthTreeName (const unsigned int i, const TTreeName*& name) const;		virtual bool							GetIthTreeWeight (const unsigned int i, double& weight) const;		virtual unsigned int					GetIthTreeInternalNodes (const unsigned int i, const bool rooted = true) const;		virtual unsigned int					GetIthTreeInternalBranches (const unsigned int i, const bool rooted = true) const;				virtual bool							IsEmpty (void) const { return (fArry.IsEmpty ()); };		virtual bool							IsEqual (const TObject& obj) const;				virtual bool							IsIthTreeBinary (const unsigned int i, const bool rooted = true) const;		virtual void							SetIthTree (const unsigned int i, const TTree& tree);				virtual void							SetIthTreeName (const unsigned int i, const TString& name);		virtual void							SetIthTreeWeight (const unsigned int i, const double weight);					virtual ostream&						Write (ostream& o) const { return (fArry.Write (o)); };			private:		virtual bool							getIthAncestorFunction (const unsigned int i, TAncestorFunction*& anf);				TArry									fArry;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TTREESTORE_H