#ifndef __TTREENODE_H#define __TTREENODE_H#include "TFlags.h"#include "TClassTypes.h"#include "TCluster.h"#include "TString.h"#include "TTreePlot.h"#include "TNexusName.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreeNode ___#endif#define TTREENODE_FLAG_MARKED				0x0001class TTreeNode : public TCluster, protected TFlags{	public:		enum		{			kMarked = 0x0001		};		TTreeNode (const double weight = kDefaultWeight);		TTreeNode (const TLeafSet& leafSet, const double weight = kDefaultWeight);			virtual ~TTreeNode (void);						virtual void 						CalcCoordinates (const TTreePlot&) const;		virtual ClassType					Class (void) const { return (kTTreeNodeClass); }; 		virtual TObject*					Clone (void) const { return (new TTreeNode (*this)); };		virtual void						DecrDegree (void) { --fDegree; };		virtual void						Disconnect (void) { fAnc = fChild = fSib = NULL; };				virtual void 						Draw (const TTreePlot&) const;		virtual TTreeNode*					GetAnc (void) { return (fAnc); };		virtual const TTreeNode*			GetAnc (void) const { return (fAnc); };		virtual TTreeNode*					GetChild (void) { return (fChild); };		virtual const TTreeNode*			GetChild (void) const { return (fChild); };		virtual unsigned int 					GetDegree (void) const { return (fDegree); };		virtual unsigned int 					GetHeight (void) const { return (fHeight); };		virtual TString						GetLabel (void) const { return (fLabel); };		virtual unsigned int 					GetNumber (void) const { return (fNumber); };		virtual TTreeNode* 					GetLeftMostSibling (void) { return (fAnc ? fAnc->fChild : this); };		virtual const TTreeNode*			GetLeftMostSibling (void) const { return (fAnc ? fAnc->fChild : this); };		virtual TTreeNode*					GetLeftSibling (void);		virtual const TTreeNode*			GetLeftSibling (void) const;		virtual TTreeNode*					GetRightMostSibling (void);		virtual const TTreeNode*			GetRightMostSibling (void) const;		virtual TTreeNode*					GetSibling (void) { return (fSib); };		virtual const TTreeNode*			GetSibling (void) const { return (fSib); };		virtual bool						HasLabel (void) const { return (!fLabel.IsNull ()); };		virtual void						IncrDegree (void) { ++fDegree; };		virtual bool						IsConnected (void) const { return (fAnc || fChild || fSib); };		virtual bool						IsLeaf (const unsigned int leaf) const { return (TCluster::IsLeaf (leaf)); };		virtual bool						IsLeaf (void) const { return (!fChild); };				virtual bool 						IsLeftMost (void) const { return (this == GetLeftMostSibling ()); };				virtual bool 						IsMarked (void) const { return (IsFlag (kMarked)); };		virtual bool 						IsRightMost (void) const { return (!fSib); };		virtual bool						IsRoot (void) const { return (!fAnc); };				virtual void						SetMarked (const bool mark = true) { SetFlag (kMarked, mark); }			TTreeNode&							operator  = (const TTreeNode& treeNode);		virtual void						SetAnc (TTreeNode* node) { fAnc = node; };		virtual void						SetChild (TTreeNode* node) { fChild = node; };		virtual void						SetDegree (const unsigned int i) { fDegree = i; };		virtual void						SetHeight (const unsigned int i) { fHeight = i; };		virtual void						SetLabel (const char* str) { ((TTreeNode*)this)->fLabel = str; };		virtual void						SetLabel (const TString& str) { ((TTreeNode*)this)->fLabel = str; }; 		virtual void 						SetNumber (const unsigned int n) { fNumber = n; };		virtual void						SetSibling (TTreeNode* node) { fSib = node; };			protected:	 				TTreeNode*							fChild;		TTreeNode*							fSib;		TTreeNode*							fAnc;		TLeafName								fLabel;			unsigned int							fNumber;					unsigned int 							fDegree;		unsigned int 							fHeight;						TPoint								fPoint;			};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TTREENODE_H