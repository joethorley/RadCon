//#ifndef _TBRANCHANDBOUND_H#define _TBRANCHANDBOUND_H#include "TClassTypes.h"#include "TCladistic.h"#include "TArray.h"#include "TTree.h"class TBranchAndBound{	class TPositions	{		public:			TPositions (const unsigned int leaves, const bool rooted);			TPositions (const TLeafSet leafSet, const bool rooted);			virtual ~TPositions (void) { };			virtual unsigned int					BranchesDone (void) const { return (fBranchesDone); };			virtual unsigned int							BranchLeaves (void) const { return (fBranchLeaves); };			virtual unsigned int					BranchesTotal (void) const { return (fBranchesTotal); };						virtual unsigned int							CurLeaf (void) const { return (fContigousLeafSet ? fCurLeaves : fLeafSet.IthLeaf (fCurLeaves)); };			virtual unsigned int							CurLeaves (void) const { return (fCurLeaves); };			virtual unsigned int							CurPosition (unsigned int leaf) const { return ((fLeafSet.IsLeaf (leaf)) ? (fCurPositions[(fLeafSet.NumberOfLeaf (leaf))-1]) : (0)); }; // only need to do numberofleaf if not contigous..			virtual unsigned int							CurPosition (void) const { return ((fCurLeaves <= GetLeaves ()) ? (fCurPositions[fCurLeaves - 1]) : (0)); };			virtual bool								IsRooted (void) const { return (fRooted); };			virtual bool								IsSequential (void) const { return (fContigousLeafSet); };						virtual const TLeafSet&						GetLeafSet (void) const { return (fLeafSet); };			virtual unsigned int							GetLeaves (void) const { return (fLeafSet.GetLeaves ()); };			virtual unsigned int							MaxPosition (unsigned int leaf) const { return ((fLeafSet.IsLeaf (leaf)) ? (fMaxPositions[(fLeafSet.NumberOfLeaf (leaf))-1]) : (0)); };				virtual bool								NextBranch (void);			virtual unsigned int							NextPosition (void) { return ((fCurLeaves < GetLeaves ()) ? (fCurPositions[++fCurLeaves - 1] += 1) : (0)); };					protected:			TLeafSet									fLeafSet;			unsigned int									fCurLeaves;			TArray<unsigned int>							fCurPositions; 			TArray<unsigned int>							fMaxPositions;			bool										fRooted; //change to flag...			bool										fContigousLeafSet; //change to flag...			unsigned int									fBranchLeaves;			unsigned int							fBranchesDone;			unsigned int							fBranchesTotal;	};		public:		TBranchAndBound (const unsigned int leaves, const bool rooted = true);		TBranchAndBound (const TLeafSet& leafSet, const bool rooted = true);		virtual ~TBranchAndBound (void);				virtual bool							AddNextLeaf (void);		virtual bool							IsRooted (void) const { return (fPositions.IsRooted ()); };				virtual const TLeafSet&					GetLeafSet (void) const { return (fPositions.GetLeafSet ()); };		virtual const TLeafSet&					GetLeafSet (const bool inTree) const { return (inTree ? fTree.GetLeafSet () : GetLeafSet ()); };		virtual unsigned int						GetLeaves (void) const { return (fPositions.GetLeaves ()); };		virtual unsigned int						GetLeaves (const bool inTree) const { return (inTree ? fTree.GetLeaves () : GetLeaves ()); };		virtual bool							NextBranch (void);						virtual const TTree&					Tree (void) const { return (fTree); };			protected:		TTree									fTree;		TPositions								fPositions;};#endif // _TBRANCHANDBOUND_H