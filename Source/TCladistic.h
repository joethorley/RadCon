#ifndef __TCLADISTIC_H#define __TCLADISTIC_H#include "TClassTypes.h"#include "TSortable.h"#include "TLeafSet.h"#include <math.h>double calcB (unsigned int leaves);float calcCIC (const double permitted, const double possible);#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TCladistic ___#endifclass TCladistic : public TSortable, protected TFlags{	public:		enum		{			kRooted = 0x0001		};				virtual unsigned int						CurLeaf (void) const { return (GetLeafSet ().CurLeaf ()); };				virtual int									Compare (const TSortable& sortable) const { CHECK_ (Class () == sortable.Class ()); return (GetLeafSet ().Compare (((const TCladistic&)sortable).GetLeafSet ())); };		virtual unsigned int  						FirstLeaf (void) const { return (GetLeafSet ().FirstLeaf ()); };		virtual const TLeafSet&						GetLeafSet (void) const = 0;		virtual unsigned int						GetLeaves (void) const { return (GetLeafSet ().GetLeaves ()); };				virtual HashValue							Hash (void) const { return (GetLeafSet ().Hash ()); };				virtual bool								IsEqual (const TObject& object) const { CHECK_ (Class () == object.Class ()); return (GetLeafSet ().IsEqual (((const TCladistic&)object).GetLeafSet ())); };				virtual bool								IsLeaf (const unsigned int leaf) const { return (GetLeafSet ().IsLeaf (leaf)); };				virtual bool 								IsRooted (void) const { return (IsFlag (kRooted)); };		virtual unsigned int  						IthLeaf (const unsigned int n) const { return (GetLeafSet ().IthLeaf (n)); };		virtual unsigned int  						NextLeaf (void) const { return (GetLeafSet ().NextLeaf ()); };		virtual ostream&							Write (ostream& o) const { return (GetLeafSet ().Write (o)); };	protected:};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TCLADISTIC_H