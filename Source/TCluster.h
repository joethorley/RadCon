#ifndef _TCLUSTER_H#define _TCLUSTER_H#include "TClassTypes.h"#include "TLeafSet.h"// TClusters are always treated as if rooted (as more efficient)// unrooted trees must be 'rooted' on the same leaf and the basal node must not be bifurcatingclass TCluster : public TLeafSet{	public:		TCluster (const double weight = kDefaultWeight) { fWeight = weight; };		TCluster (const TLeafSet& leafSet, const double weight = kDefaultWeight) : TLeafSet (leafSet) { fWeight = weight; };		TCluster (const TCluster& cluster) : TLeafSet (cluster) { fWeight = cluster.fWeight; };		virtual ~TCluster (void) { };		virtual void						AddWeight (const double weight) { fWeight += weight; };				virtual ClassType					Class (void) const { return (kTClusterClass); }; 		virtual TObject*					Clone (void) const { return (new TCluster (*this)); };		virtual void						Copy (const TObject& obj);		virtual double					GetWeight (void) const { return (fWeight); };				virtual void						IncrWeight (const double weight = 1) { fWeight += weight; };		virtual bool						IsCompatible (const TCluster& cluster) const { return ((bool)(Relationship (cluster) != overlapping)); };		virtual bool						IsInformative (const TLeafSet& leafSet) const { CHECK_ (IsSubset (leafSet)); return ((bool)(1 < GetLeaves () && !IsEqual (leafSet))); };								TCluster&		 					operator  = (const TCluster& cluster);		virtual void						SetWeight (const double weight = kDefaultWeight) { CHECK_ (kMinWeight <= weight && weight <= kMaxWeight); fWeight = weight; };		virtual ostream& 					Write (ostream &o) const { return (Write (o, false)); };		virtual ostream& 					Write (ostream &o, const bool writeWeight) const;		virtual ostream& 					WriteAsStar (ostream &o, const unsigned int leaves, const bool writeWeight = false, const bool bordered = false) const;		virtual ostream& 					WriteAsStar (ostream &o, const TLeafSet& leafSet, const bool writeWeight = false, const bool bordered = false) const;		virtual void	 					WriteToLogAsStar (const TLeafSet& leafSet, const bool writeWeight = false, const bool bordered = false) const;			protected:		static ostream& 					writeBorder (ostream& o, const unsigned int leaves);		static ostream& 					writeLeafNumbers (ostream& o, const unsigned int leaves);			double							fWeight;};#endif // _TCLUSTER_H