#include "TLeafMap.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifvoid TLeafMap::AddMapping (const unsigned int from, const unsigned int to){	CHECK_ (!fFrom.IsLeaf (from) && !fTo.IsLeaf (to));	fFrom += from;	fMap[from - 1] = to;	fTo += to;}void TLeafMap::AddMapping (const TLeafSet& from, const TLeafSet& to){	CHECK_ (from.GetLeaves () == to.GetLeaves ());		unsigned int leafFrom = from.FirstLeaf ();	unsigned int leafTo = to.FirstLeaf ();	while (leafFrom)	{		AddMapping (leafFrom, leafTo);		leafFrom = from.NextLeaf ();		leafTo = to.NextLeaf (); 	}}void TLeafMap::ClearMapping (void) { 	fMap.Fill (0); 	fFrom.SetEmpty ();	fTo.SetEmpty ();}void TLeafMap::ClearMapping (const unsigned int from) {	if (fFrom.IsLeaf (from))	{				fTo -= fMap[from - 1];		fMap[from - 1] = 0;		fFrom -= from;	}}void TLeafMap::ClearMapping (const TLeafSet& from) {	for (unsigned int leaf = from.FirstLeaf (); leaf; leaf = from.NextLeaf ())		ClearMapping (leaf);}void TLeafMap::Copy (const TObject& object){	CHECK_ (Class () == object.Class ());		const TLeafMap& leafMap = (const TLeafMap&)object;		fMap = leafMap.fMap;	fFrom.Copy (leafMap.fFrom);	fTo.Copy (leafMap.fTo);}TLeafSet TLeafMap::GetMapping (const TLeafSet& leafSet) const{	TLeafSet from;	for (unsigned int leaf = leafSet.FirstLeaf (); leaf; leaf = leafSet.NextLeaf ())		from += GetMapping (leaf);	return (from);}void TLeafMap::IncrMapping (const unsigned int incr){		TLeafMap map (*this);	ClearMapping ();	for (unsigned int leaf = map.FirstLeaf (); leaf; leaf = map.NextLeaf ())		AddMapping (leaf, map.GetMapping (leaf) + incr);}TLeafMap& TLeafMap::operator = (const TLeafMap& leafMap){	fMap = leafMap.fMap;	fFrom = leafMap.fFrom;	fTo = leafMap.fTo;		return (*this);}void TLeafMap::SetMapping (const unsigned int from, const unsigned int to){	ClearMapping ();	AddMapping (from, to);}void TLeafMap::SetMapping (const TLeafSet& from, const TLeafSet& to){	ClearMapping ();	AddMapping (from, to);}TLeafMap::TLeafMap (void) 	:	fMap (kMaxLeaves, 0) { }TLeafMap::TLeafMap (const unsigned int from, const unsigned int to)	: 	fMap (kMaxLeaves, 0)	,	fFrom (from)	,	fTo (to) {	fMap[from - 1] = to;}TLeafMap::TLeafMap (const TLeafSet& from, const TLeafSet& to) 	: 	fMap (kMaxLeaves, 0)	,	fFrom (from)	,	fTo (to) { 	CHECK_ (from.GetLeaves () == to.GetLeaves ());		unsigned int leafFrom = from.FirstLeaf ();	unsigned int leafTo = to.FirstLeaf ();	while (leafFrom)	{		fMap[leafFrom - 1] = leafTo;		leafFrom = from.NextLeaf ();		leafTo = to.NextLeaf (); 	}}TLeafMap::TLeafMap (const TLeafMap& leafMap)	:	fMap (leafMap.fMap)	,	fFrom (leafMap.fFrom)	,	fTo (leafMap.fTo){}TLeafMap::~TLeafMap (void) { } #if PRAGMA_MARK_SUPPORTED#pragma mark -#endif