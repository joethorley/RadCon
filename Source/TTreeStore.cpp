#include "TTreeStore.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifvoid TTreeStore::AddItem (const TTree& tree) {	CHECK_ (tree.IsRooted ());		CHECK_ (GetItems () < kMaxItems);		TAncestorFunction anf;	tree.AncestorFunction (anf); 	fArry.AddItem (anf); }void TTreeStore::Copy (const TObject& obj){	CHECK_ (Class () == obj.Class ());	const TTreeStore& treeStore = (const TTreeStore&)obj;		fArry.Copy (treeStore.fArry);}bool TTreeStore::GetIthAncestorFunction (const unsigned int i, const TAncestorFunction*& anf) const{	const TObject* item;	if (fArry.IthItem (i, item))	{		anf = (const TAncestorFunction*)item;		return (true);	}	return (false);}bool TTreeStore::getIthAncestorFunction (const unsigned int i, TAncestorFunction*& anf){	TObject* item = NULL;	if (fArry.IthItem (i, item))	{		anf = (TAncestorFunction*)item;		return (true);	}	return (false);}bool TTreeStore::GetIthTree (const unsigned int i, TTree& tree) const{	CHECK_ (tree.IsRooted ());		const TAncestorFunction* anf = NULL;	if (GetIthAncestorFunction (i, anf))	{		tree.FromAncestorFunction (*anf);		return (true);	}	return (false);}bool TTreeStore::GetIthTreeLeafSet (const unsigned int i, const TLeafSet*& leafSet) const{	const TAncestorFunction* anf = NULL;	if (GetIthAncestorFunction (i, anf))	{		leafSet = &(anf->GetLeafSet ());		return (true);	}	return (false);}bool TTreeStore::GetIthTreeName (const unsigned int i, const TTreeName*& name) const{	const TAncestorFunction* anf = NULL;	if (GetIthAncestorFunction (i, anf))	{		name = &(anf->GetName ());		return (true);	}	return (false);}bool TTreeStore::GetIthTreeWeight (const unsigned int i, double& weight) const{	const TAncestorFunction* anf = NULL;	if (GetIthAncestorFunction (i, anf))	{		weight = anf->GetWeight ();		return (true);	}	return (false);}unsigned int TTreeStore::GetIthTreeInternalNodes (const unsigned int i, const bool rooted) const{	CHECK_ (GetIthItem (i));	const TAncestorFunction* anf = NULL;	GetIthAncestorFunction (i, anf);	return (anf->GetInternalNodes (rooted));}unsigned int TTreeStore::GetIthTreeInternalBranches (const unsigned int i, const bool rooted) const{	CHECK_ (GetIthItem (i));	const TAncestorFunction* anf = NULL;	GetIthAncestorFunction (i, anf);	return (anf->GetInternalBranches (rooted));}bool TTreeStore::IsEqual (const TObject& obj) const { 	CHECK_ (Class () == obj.Class ()); 		const TTreeStore& treeStore = (const TTreeStore&)obj;		return (fArry.IsEqual (treeStore.fArry));}bool TTreeStore::IsIthTreeBinary (const unsigned int i, const bool rooted) const{	CHECK_ (GetIthItem (i));		const TAncestorFunction* anf = NULL;	GetIthAncestorFunction (i, anf);	return (anf->IsBinary (rooted));}void TTreeStore::SetIthTree (const unsigned int i, const TTree& tree){	CHECK_ (GetIthItem (i));	CHECK_ (tree.IsRooted ());		TAncestorFunction anf;	tree.AncestorFunction (anf); 			TAncestorFunction* item = NULL;		getIthAncestorFunction (i, item);	*item = anf;}void TTreeStore::SetIthTreeName (const unsigned int i, const TString& name) { 			CHECK_ (GetIthItem (i));	TAncestorFunction* anf = NULL;		getIthAncestorFunction (i, anf);	anf->SetName (name);}void TTreeStore::SetIthTreeWeight (const unsigned int i, const double weight){	CHECK_ (GetIthItem (i));				TAncestorFunction* anf = NULL;		getIthAncestorFunction (i, anf);		anf->SetWeight (weight);}TTreeStore::TTreeStore (void) 	: fArry (20, 1000){  }TTreeStore::TTreeStore (const TTreeStore& treeStore)	: fArry (treeStore.fArry){}TTreeStore::~TTreeStore (void) {  }#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif