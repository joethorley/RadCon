#ifndef _TCLUSTERLIST_H#define _TCLUSTERLIST_H#include "TChecks.h"#include "TFlags.h"#include "TCluster.h"#include "TDList.h"// treats all clusters as if rooted (as more efficient)class TClusterListIteratorConst;class TClusterList : public TObject, protected TFlags{	friend class TClusterListIteratorConst;	public:		TClusterList (const TLeafSet& leafSet) : fDList (), fLeafSet (leafSet) { CHECK_ (2 < leafSet.GetLeaves ()); };		TClusterList (const TClusterList& clusterList) : fDList (clusterList.fDList), fLeafSet (clusterList.fLeafSet) { };		virtual ~TClusterList (void) { };		virtual void								AddCluster (TCluster* cluster);		virtual void								AddCluster (const TCluster& cluster) { AddCluster ((TCluster*)(cluster.Clone ())); };			virtual ClassType							Class (void) const { return (kTClusterListClass); };		virtual TObject*							Clone (void) const { return (new TClusterList (*this)); };		virtual void								Copy (const TObject& obj);		virtual bool								CurCluster (void) const { return (fDList.CurItem ()); };		virtual bool								CurCluster (const TCluster*& cluster) const;		 		virtual void								DeleteAll (void) { fDList.DeleteAll (); };		virtual void								DeleteCurCluster (void) { fDList.DeleteCurItem (); };				virtual void								DetachCurCluster (TCluster*& cluster); 		virtual bool								FirstCluster (void) const { return (fDList.FirstItem ()); };		virtual bool								FirstCluster (const TCluster*& cluster) const;		virtual HashValue 							Hash (void) const { return (fDList.Hash ()); };		virtual bool								IsCompatible (const TCluster& cluster) const;				virtual const TLeafSet&						GetLeafSet (void) const { return (fLeafSet); };		virtual unsigned int							GetLeaves (void) const { return (fLeafSet.GetLeaves ()); };				virtual TClusterListIteratorConst&			IteratorConst (void) const;								virtual bool								IsEmpty (void) const { return (fDList.IsEmpty ()); };		virtual bool								IsEqual (const TObject& obj) const;		virtual bool								LastCluster (void) const { return (fDList.LastItem ()); };		virtual bool								LastCluster (const TCluster*& cluster) const;		virtual bool								NextCluster (void) const { return (fDList.NextItem ()); };		virtual bool								NextCluster (const TCluster*& cluster) const;		virtual TClusterList&						operator = (const TClusterList& clusterSet);						virtual unsigned int						Clusters (void) const { return (fDList.GetItems ()); };		virtual unsigned int						Clusters (const float limit) const; // JLT 010418		virtual ostream& 							Write (ostream& o) const { return (Write (o, 100, true, false)); };		virtual ostream&							Write (ostream& o, const float limit, const bool writeWeights, const bool writeDifferences) const;	protected:		virtual double							getDifference (const TCluster& cluster) const;		ostream& 									writeLeafNumbers (ostream& o, const unsigned int leaves) const;		ostream& 									writeBorder (ostream& o, const unsigned int leaves) const;		TDList										fDList;		TLeafSet									fLeafSet;};class TClusterListIteratorConst{	friend class TClusterList;	public:	    TClusterListIteratorConst (const TClusterList& clusterSet);	    virtual ~TClusterListIteratorConst (void);		virtual bool							CurCluster (void) const { return (fDListIteratorConst.CurItem ()); };		virtual bool							CurCluster (const TCluster*& cluster) const;		virtual bool							FirstCluster (void) { return (fDListIteratorConst.FirstItem ()); };		virtual bool							FirstCluster (const TCluster*& cluster);		virtual bool 							IsReversible (void) const { return (fDListIteratorConst.IsReversible ()); };		virtual bool							LastCluster (void) { return (fDListIteratorConst.LastItem ()); };		virtual bool							LastCluster (const TCluster*& cluster);				virtual bool							NextCluster (void) { return (fDListIteratorConst.NextItem ()); };		virtual bool							NextCluster (const TCluster*& cluster);				virtual bool							PrevCluster (void) { return (fDListIteratorConst.PrevItem ()); };		virtual bool							PrevCluster (const TCluster*& cluster);	protected:		const TClusterList&						fClusterList;	    TDListIteratorConst&					fDListIteratorConst;};inlineTClusterListIteratorConst& TClusterList::IteratorConst (void) const{	return (*(new TClusterListIteratorConst (*this)));}#endif // _TCLUSTERLIST_H