#ifndef _TTREECIC_H#define _TTREECIC_H#include "TClassTypes.h"#include "TCladistic.h"#include "TTree.h"#include "TBranchAndBound.h"#include "TArry.h"class TTreeCIC{	public:		TTreeCIC (const bool rooted = true);		virtual ~TTreeCIC (void) { };				virtual void							AddTree (const TTree& tree);		virtual void							CalcCICs (const bool combined = false) const;		virtual float				IthTreeCIC (const unsigned int i) const { return (fCICs.IthItemRef ((const unsigned int)i)); };		virtual bool							IsRooted (void) const { return (fRooted); };		virtual const TLeafSet&					GetLeafSet (void) const { return (fLeafSet); };		virtual unsigned int						GetLeaves (void) const { return (fLeafSet.GetLeaves ()); };				virtual double						Permitted (void) const { return (fPermitted); };				virtual ostream&						WriteCICs (ostream& dummy) const;		protected:		TLeafSet								fLeafSet;		bool									fRooted;		double								fPermitted;				TArry									fTrees; // store in trees what exactly the tree is..		TVArray<float>				fCICs;		TBranchAndBound*						fBranchAndBound;};#endif // _TTREECIC_H