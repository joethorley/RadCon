#include "TNexusName.h"TNexusName::TNexusName (const char* str)	: TString (str){}TNexusName::TNexusName (const TString& string)	: TString (string){}		TNexusName::~TNexusName (void){}TNexusName& TNexusName::operator = (const TNexusName& nexusName){	TString::operator = (nexusName);	return (*this);	}	ostream& TNexusName::WriteQuoted (ostream& o) const{	if (IsQuoted ())	{		o << "'";		TString::Write (o);		o << "'";	}	else		TString::Write (o);	return (o);}unsigned int TTreeName::GetTreeNumber (void) const{	if (IsBootstrap ())	{		TString string;			unsigned int u = 3;		while (IthChar (u) != '.')			++u;		++u;		while (isdigit (IthChar (u)))			string.AddToThis (IthChar (u++));		return (string.ToInteger ());	}	return (0);}	unsigned int TTreeName::GetReplicateNumber (void) const{	if (IsBootstrap ())	{		TString string;		unsigned int u = 3;		while (isdigit (IthChar (u)))			string.AddToThis (IthChar (u++));		return (string.ToInteger ());	}	return (0);}	bool TTreeName::IsBootstrap (void) const{	unsigned int u = 1;		if (IthChar (u) != 'B' || IthChar (++u) != '_' || !(isdigit (IthChar (++u))))		return (false);		while (isdigit (IthChar (u)))		++u;		if (IthChar (u) != '.' || !isdigit (IthChar (++u)))		return (false);	while (isdigit (IthChar (u)))		++u;		return ((bool)(IthChar (u) == '\0'));}bool TTreeName::IsBootstrap (const unsigned int replicate, const unsigned int number) const{	return ((bool)(GetReplicateNumber () == replicate && GetTreeNumber () == number));}TTreeName& TTreeName::operator  = (const TTreeName& treeName){	TNexusName::operator = (treeName);	return (*this);}void TTreeName::SetBootstrap (const unsigned int replicate, const unsigned int number){	SetNull ();	*this = "B_";	char s [10];	sprintf (s, "%u", replicate);	this->AddToThis (s);	this->AddToThis (".");	sprintf (s, "%u", number);	this->AddToThis (s);}TTreeName::TTreeName (const char* str)  	: TNexusName (str) {} TTreeName::TTreeName (const TString& string)  	: TNexusName (string) { }		TTreeName::~TTreeName (void) { }void TLeafName::Copy (const TObject& obj){	CHECK (Class () == obj.Class ());	const TLeafName& leafName = (const TLeafName&)obj;	TNexusName::Copy (leafName);	fNumber = leafName.fNumber;}TLeafName& TLeafName::operator = (const TLeafName& leafName){	TNexusName::operator = (leafName);	fNumber = leafName.fNumber;	return (*this);}ostream& TLeafName::WriteWithNumber (ostream& o) const{	o << fNumber << ' ';	return (Write (o));}TLeafName::TLeafName (const char* str, const unsigned int leafNumber)	:	TNexusName (str)	,	fNumber (leafNumber){}TLeafName::TLeafName (const TString& string, const unsigned int leafNumber)	:	TNexusName (string)	,	fNumber (leafNumber){}TLeafName::TLeafName (const TLeafName& leafName)	:	TNexusName (leafName)	,	fNumber (leafName.fNumber){}TLeafName::~TLeafName (void){}