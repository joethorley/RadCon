#ifndef __TDISTANCEMATRIX_H#define __TDISTANCEMATRIX_H#include "TClassTypes.h"#include "TChecks.h"#include "TArray.h"#include "TFlags.h"#include "TLeafSet.h"class TDistanceMatrix : protected TFlags{	public:		TDistanceMatrix (const unsigned int leaves = kMaxLeaves);		TDistanceMatrix (const TLeafSet& leafSet);		virtual ~TDistanceMatrix (void);				virtual unsigned int								Distance (const unsigned int leafA, const unsigned int leafB) const { CHECK_ (leafA < leafB && fLeafSet.IsLeaf (leafA) && fLeafSet.IsLeaf (leafB)); return (fMatrix[leafA - 1]->IthItemRef (leafB - leafA)); };						virtual bool									IsLeaf (const unsigned int leaf) const { return (GetLeafSet ().IsLeaf (leaf)); };				virtual unsigned int								GetLeaves (void) const { return (fLeafSet.GetLeaves ()); };				virtual const TLeafSet&							GetLeafSet (void) const { return (fLeafSet); };						virtual TDistanceMatrix&						operator = (const TDistanceMatrix& distanceMatrix) { CHECK_ (0); return (*this); };				virtual void									SetDistance (const unsigned int leafA, const unsigned int leafB, const unsigned int distance) { CHECK_ (leafA < leafB && fLeafSet.IsLeaf (leafA) && fLeafSet.IsLeaf (leafB)); fMatrix[leafA - 1]->IthItemRef (leafB - leafA) = distance; };		virtual void									SetLeafSet (const TLeafSet& leafSet) { CHECK_ (2 < leafSet.GetLeaves ()); fLeafSet = leafSet; };	protected:				unsigned int										fMaxLeaves;		TLeafSet										fLeafSet;		TArray<TArray<unsigned int>*>						fMatrix;};#endif // __TDISTANCEMATRIX_H