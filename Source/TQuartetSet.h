#ifndef __TQUARTETSET_H#define __TQUARTETSET_H#include <stdlib.h>#include "TChecks.h"#include "TClassTypes.h"#include "TQuartetPartition.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TQuartetSet ___#endif#define TQUARTETSET_FLAG_ROOTED 			0x0001class TQuartetSet : public TObject, protected TFlags{	public:		TQuartetSet (const unsigned short leaves, const bool rooted = true);		TQuartetSet (const TQuartetSet& quartetSet);		virtual ~TQuartetSet (void);				virtual void							AddQuartets (const TDistanceMatrix& distanceMatrix, const double weight = kDefaultWeight) { CHECK_ (CurPartition ()); fPartition->AddQuartets (distanceMatrix, weight); };		virtual ClassType						Class (void) const { return (kTQuartetSetClass); }		virtual TObject*						Clone (void) const { return (new TQuartetSet (*this)); };		virtual void							Copy (const TObject& obj);		virtual bool							CurPartition (void) const { return (fPartition); };		virtual bool							CurQuartetCurPartition (void) const { CHECK_ (CurPartition ()); return (fPartition->CurQuartet ()); };		virtual bool							CurQuartetCurPartition (const TQuartet*& quartet) const { CHECK_ (CurPartition ()); return (fPartition->CurQuartet (quartet)); };		virtual bool							FirstPartition (void);		virtual bool							FirstQuartetCurPartition (void) const { CHECK_ (CurPartition ()); return (fPartition->FirstQuartet ()); };		virtual bool							FirstQuartetCurPartition (const TQuartet*& quartet) const { CHECK_ (CurPartition ()); return (fPartition->FirstQuartet (quartet)); };						virtual unsigned short					GetCurPartitionNumber (void) const { return (fCurPartition); };		virtual unsigned short					GetPartitions (void) const { return (fPartitions); };		virtual unsigned long	 				GetQuartets (const bool leaf = false) const;		virtual unsigned short 					GetQuartetsCurPartition (void) const { return (CurPartition () ? fPartition->GetQuartets () : 0); };		virtual unsigned short					GetResolvedQuartetsCurPartition (const unsigned short leaf = 0) const { return (CurPartition () ? fPartition->GetResolvedQuartets (leaf) : 0); };				virtual HashValue						Hash (void) const;		virtual bool							IsEqual (const TObject&) const;				virtual bool							IsRooted (void) const { return (IsFlag (TQUARTETSET_FLAG_ROOTED)); };		virtual bool							IthQuartetCurPartition (const unsigned short i) const { CHECK_ (CurPartition ()); return (fPartition->IthQuartet (i)); };		virtual bool							IthQuartetCurPartition (const unsigned short i, const TQuartet*& quartet) const { CHECK_ (CurPartition ()); return (fPartition->IthQuartet (i, quartet)); };		virtual const TQuartet&					IthQuartetCurPartitionRef (const unsigned short i) const { CHECK_ (CurPartition ()); return (fPartition->IthQuartetRef (i)); };				virtual bool							LastQuartetCurPartition (void) const { CHECK_ (CurPartition ()); return (fPartition->LastQuartet ()); };		virtual bool							LastQuartetCurPartition (const TQuartet*& quartet) const { CHECK_ (CurPartition ()); return (fPartition->LastQuartet (quartet)); };		virtual TLeafSet						GetLeafSet (void) const { return (fLeafSet); };		virtual unsigned short					GetLeaves (void) const { return (fLeafSet.GetLeaves ()); };		virtual bool							NextPartition (void);		virtual bool							NextQuartetCurPartition (void) const  { CHECK_ (CurPartition ()); return (fPartition->NextQuartet ()); };		virtual bool							NextQuartetCurPartition (const TQuartet*& quartet) const  { CHECK_ (CurPartition ()); return (fPartition->NextQuartet (quartet)); };		virtual TQuartetSet&					operator = (const TQuartetSet& quartetSet);		virtual bool							PrevQuartetCurPartition (void) const  { CHECK_ (CurPartition ()); return (fPartition->PrevQuartet ()); };		virtual bool							PrevQuartetCurPartition (const TQuartet*& quartet) const { CHECK_ (CurPartition ()); return (fPartition->PrevQuartet (quartet)); };					virtual ostream&						Write (ostream& o) const;			protected:									TLeafSet								fLeafSet;				TQuartetPartition*						fPartition;		unsigned short							fPartitions;		unsigned short							fCurPartition;				unsigned short							fPartitionSize;		unsigned short							fLastPartitionSize;				TQuartet								fStartPartition;	};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif						#endif // __TQUARTETSET_H