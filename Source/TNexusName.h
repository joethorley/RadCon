#ifndef __TNEXUSNAME_H#define __TNEXUSNAME_H#include "TString.h"#include "TClassTypes.h"#include "Nexus.h"#include "TFlags.h"class TNexusName : public TString, protected TFlags{	public:		TNexusName (const char* str ="");		TNexusName (const TString& string);				virtual ~TNexusName (void);		virtual ClassType				Class (void) const { return (kTNexusNameClass); };		virtual TObject*				Clone (void) const { return (new TNexusName (*this)); };				virtual bool					IsQuoted (void) const { return (Nexus::IsPunctuationAndWhiteSpaceCharacters (*this)); };							    TNexusName&						operator  = (const TNexusName& treeName);						virtual ostream&				WriteQuoted (ostream& o) const;};class TTreeName : public TNexusName{	public:		TTreeName (const char* str ="");		TTreeName (const TString& string);				virtual ~TTreeName (void);				virtual unsigned int				GetTreeNumber (void) const;				virtual unsigned int			GetReplicateNumber (void) const;		virtual ClassType				Class (void) const { return (kTTreeNameClass); };		virtual TObject*				Clone (void) const { return (new TTreeName (*this)); };			virtual bool					IsBootstrap (void) const;		virtual bool 					IsBootstrap (const unsigned int replicate, const unsigned int number) const;					    virtual TTreeName&				operator  = (const TTreeName& treeName);			virtual void					SetBootstrap (const unsigned int replicate, const unsigned int number);};class TLeafName : public TNexusName{	public:		TLeafName (const char* str ="", const unsigned int leafNumber = 0);		TLeafName (const TString& string, const unsigned int leafNumber = 0);		TLeafName (const TLeafName& leafName);				virtual ~TLeafName (void);				virtual ClassType				Class (void) const { return (kTLeafNameClass); };		virtual TObject*				Clone (void) const { return (new TLeafName (*this)); };		virtual void					Copy (const TObject& obj);		virtual unsigned int				GetNumber (void) const { return (fNumber); };				virtual HashValue				Hash (void) const { CHECK_ (0); return (0); };					    virtual TLeafName&				operator  = (const TLeafName& treeName);		virtual void					SetNumber (const unsigned int number) { fNumber = number; };		virtual ostream&				WriteWithNumber (ostream& o) const;		protected:		unsigned int						fNumber;};#endif // __TNEXUSNAME_H