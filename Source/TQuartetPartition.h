#ifndef __TQUARTETPARTITION_H#define __TQUARTETPARTITION_H#include <stdlib.h>#include "TChecks.h"#include "TClassTypes.h"#include "TQuartet.h"#include "TDistanceMatrix.h"#define TQUARTETPARTITION_FLAG_ROOTED 			0x0001#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TQuartetPartition ___#endifclass TQuartetPartition : public TObject, protected TFlags{	public:		TQuartetPartition (TQuartet start, const unsigned short quartets, const unsigned short leaves);		TQuartetPartition (const TQuartetPartition& quartetPartition);		virtual ~TQuartetPartition (void);				virtual void					AddQuartets (const TDistanceMatrix& distanceMatrix, const double weight = kDefaultWeight);		virtual ClassType				Class (void) const { return (kTQuartetPartitionClass); }		virtual TObject*				Clone (void) const { return (new TQuartetPartition (*this)); };		virtual void					Copy (const TObject& obj);				virtual bool					FirstQuartet (void) const { return (IthQuartet (((TQuartetPartition*)this)->fCurQuartet = 1)); };		virtual bool					FirstQuartet (const TQuartet*& quartet) const { return (IthQuartet (((TQuartetPartition*)this)->fCurQuartet = 1, quartet)); };		virtual bool					NextQuartet (void) const { return (CurQuartet () ? IthQuartet (((TQuartetPartition*)this)->fCurQuartet += 1) : false); };		virtual bool					NextQuartet (const TQuartet*& quartet) const { return (CurQuartet () ? IthQuartet (((TQuartetPartition*)this)->fCurQuartet += 1, quartet) : false); };		virtual bool					LastQuartet (void) const { return (IthQuartet (((TQuartetPartition*)this)->fCurQuartet = GetQuartets ())); };		virtual bool					LastQuartet (const TQuartet*& quartet) const { return (IthQuartet (((TQuartetPartition*)this)->fCurQuartet = GetQuartets (), quartet)); };		virtual bool					PrevQuartet (void) const { return (CurQuartet () ? IthQuartet (((TQuartetPartition*)this)->fCurQuartet -= 1) : false); };		virtual bool					PrevQuartet (const TQuartet*& quartet) const { return (CurQuartet () ? IthQuartet (((TQuartetPartition*)this)->fCurQuartet -= 1, quartet) : false); };		virtual bool					CurQuartet (void) const { return (IthQuartet (fCurQuartet)); }		virtual bool					CurQuartet (const TQuartet*& quartet) const { return (IthQuartet (fCurQuartet, quartet)); };		virtual bool					IthQuartet (const unsigned short i) const { return (i <= GetQuartets () && 0 < i); };		virtual bool					IthQuartet (const unsigned short i, const TQuartet*& quartet) const;		virtual unsigned short	 	GetQuartets (void) const  { return ((unsigned short)(fArray.Size ())); };		virtual unsigned short		GetResolvedQuartets (const unsigned short leaf = 0) const;				virtual HashValue				Hash (void) const { CHECK_ (0); return (0); };						virtual bool					IsEqual (const TObject&) const;		virtual const TQuartet&			IthQuartetRef (const unsigned short i) const { return (fArray.IthItemRef (i)); };				virtual bool					IsRooted (void) const { return (IsFlag (TQUARTETPARTITION_FLAG_ROOTED)); };				virtual TQuartetPartition&		operator = (const TQuartetPartition& quartetPartition);					virtual ostream&				Write (ostream& o) const { return (fArray.Write (o)); };			protected:					virtual TQuartet&				ithQuartetRef (const unsigned short i) { return (fArray.IthItemRef (i)); };							TQuartet						fStart;		unsigned short					fLeaves;		TArray<TQuartet>				fArray;		unsigned short					fCurQuartet;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif						#endif // __TQUARTETPARTITION_H