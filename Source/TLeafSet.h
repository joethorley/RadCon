/***************************************************************************	(c) 1998, Joseph L. Thorley		All rights reserved			History: 31/7/98****************************************************************************/#ifndef _TLEAFSET_H#define _TLEAFSET_H#include "TClassTypes.h"#include "TSortable.h"#include "TBitSet.h"// seriously add flag that handles if contiguous elements....// could always also store last leaf.......could be interesting...class TLeafSet : public TSortable{	public:				TLeafSet (void) : fBitSet () { };		TLeafSet (const unsigned int n) : fBitSet (n) { };		TLeafSet (const TLeafSet& leafSet) : fBitSet (leafSet.fBitSet) { };		virtual ~TLeafSet (void) { };		virtual void						AddToThis (const TLeafSet& leafSet) { fBitSet.AddToThis (leafSet.fBitSet); };		virtual void			 			AddToThis (const unsigned int leaf) { fBitSet.AddToThis (leaf); };				virtual ClassType					Class (void) const { return (kTLeafSetClass); }; 		virtual TObject*					Clone (void) const { return (new TLeafSet (*this)); };		virtual int 						Compare (const TSortable& sortable) const;		virtual void						Complement (TLeafSet& leafSet, const unsigned int n = kMaxLeaves) const { fBitSet.Complement (leafSet.fBitSet, n); };		virtual void						Copy (const TObject& obj);		virtual unsigned int					CurLeaf (void) const { return ((unsigned int)(fBitSet.CurElement ())); };					virtual void 						SubtractFromThis (const TLeafSet& leafSet) { fBitSet.SubtractFromThis (leafSet.fBitSet); };		virtual void 						SubtractFromThis (const unsigned int n) { fBitSet.SubtractFromThis (n); };		virtual void 						SetEmpty (void) { fBitSet.SetEmpty (); };		virtual unsigned int  				FirstLeaf (void) const { return ((unsigned int)(fBitSet.FirstElement ())); };		virtual void 						SetFull (const unsigned int n = kMaxLeaves) { fBitSet.SetFull (n); };    	virtual HashValue					Hash (void) const { return (fBitSet.Hash ()); };		virtual void 						Intersection (const TLeafSet& leafSet, TLeafSet& intersection) const { fBitSet.Intersection (leafSet.fBitSet, intersection.fBitSet); };				virtual void						IntersectWithThis (const TLeafSet& leafSet) { fBitSet.IntersectWithThis (leafSet.fBitSet); };		virtual void						IntersectWithThis (const unsigned int leaf) { fBitSet.IntersectWithThis (leaf); };		virtual bool 						IsSequential (void) const { return (fBitSet.IsSequential ()); };		virtual bool 						IsDisjoint (const TLeafSet& leafSet) const { return (fBitSet.IsDisjoint (leafSet.fBitSet)); };		virtual bool						IsEmpty (void) const { return (fBitSet.IsEmpty ()); };		virtual bool						IsEqual (const TObject&) const;		virtual bool						IsLeaf (const unsigned int n) const { return (fBitSet.IsElement ((unsigned int) n)); };		virtual bool						IsSubset (const TLeafSet& leafSet) const { return (fBitSet.IsSubset (leafSet.fBitSet)); };		virtual bool						IsSuperset (const TLeafSet& leafSet) const { return (fBitSet.IsSuperset (leafSet.fBitSet)); }; 		virtual unsigned int  				IthLeaf (const unsigned int n) const { return (fBitSet.IthElement ((unsigned int) n)); };		virtual unsigned int					LastLeaf (void) const { return ((unsigned int)(fBitSet.LastElement ())); };		virtual unsigned int					GetLeaves (void) const { return ((unsigned int)(fBitSet.GetSize ())); }		virtual unsigned int 					NumberOfLeaf (const unsigned int n) const { return ((unsigned int)(fBitSet.NumberOfElement ((unsigned int) n))); };		virtual unsigned int  				NextLeaf (void) const { return ((unsigned int)(fBitSet.NextElement ())); };		virtual unsigned int  				NextLeaf (const unsigned int n) const { return ((unsigned int)(fBitSet.NextElement ((unsigned int) n))); }								TLeafSet& 							operator = (const TLeafSet& leafSet);		virtual TLeafSet& 					operator += (const TLeafSet& leafSet);		virtual TLeafSet& 					operator += (const unsigned int leaf);		virtual TLeafSet& 					operator *= (const TLeafSet& leafSet);		virtual TLeafSet& 					operator *= (const unsigned int leaf);		virtual TLeafSet& 					operator -= (const TLeafSet& leafSet);		virtual TLeafSet& 					operator -= (const unsigned int leaf);						virtual TLeafSet					operator + (const TLeafSet& leafSet) const;							virtual TLeafSet					operator * (const TLeafSet& leafSet) const;							virtual TLeafSet					operator - (const TLeafSet& leafSet) const;							virtual SetRelations 				Relationship (const TLeafSet& leafSet) const { return (fBitSet.Relationship (leafSet.fBitSet)); };							virtual void 						SetDifference (const TLeafSet& leafSet, TLeafSet& setDifference) const { fBitSet.SetDifference (leafSet.fBitSet, setDifference.fBitSet); };		virtual void						ShiftLeaves (const unsigned int positions = 1);		virtual void 						Union (const TLeafSet& leafSet, TLeafSet& uniun) const { fBitSet.Union (leafSet.fBitSet, uniun.fBitSet); };		virtual ostream& 					Write (ostream& o) const { return (fBitSet.Write (o)); };	protected:		TBitSet<kMaxLeaves>					fBitSet;};#endif  // _TLEAFSET_H