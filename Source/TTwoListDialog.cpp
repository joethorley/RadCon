#include "TTwoListDialog.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifBOOL TTwoListDialog::DoItem (int item){	BOOL processed = TRUE;		int n;		switch (item)	{			case kIDLeftList:#ifdef Macintosh			switch (fLeftList->GetStatus ())#else			switch (GetItemMsg ())#endif			{				case VLIST_SELECTION_CHANGE:					EnableItem (kIDLeftToRight, (BOOL) (fLeftList->GetNumSelections () > 0));						break;									case VLIST_DOUBLE_CLICK:					// Move selection to other list					fLeftList->MoveSelection (fRightList);					// Move Button					EnableItem (kIDLeftToRight, 						(BOOL)((fLeftList->GetNumItems () > fMinInLeftList) && 						(fLeftList->GetNumSelections () > 0)));						// All buttons							EnableItem (kIDAllLeft, (BOOL)(fLeftList->GetNumItems () > 0));					EnableItem (kIDAllRight, (BOOL)(fRightList->GetNumItems () > 0));					break;					default:					EnableItem (kIDLeftToRight, (BOOL) (fLeftList->GetNumSelections () > 0));						break;			}			break;					case kIDRightList:#ifdef Macintosh			switch (fRightList->GetStatus ())#else			switch (GetItemMsg ())#endif			{				case VLIST_SELECTION_CHANGE:					EnableItem (kIDRightToLeft, (BOOL) (fRightList->GetNumSelections () > 0));						break;									case VLIST_DOUBLE_CLICK:					// Move selection to other list					fRightList->MoveSelection (fLeftList);					// Move Button					EnableItem (kIDRightToLeft, 						(BOOL)((fRightList->GetNumItems () > 0) && 						(fRightList->GetNumSelections () > 0)));						// All buttons							EnableItem (kIDAllLeft, (BOOL)(fLeftList->GetNumItems () > 0));					EnableItem (kIDAllRight, (BOOL)(fRightList->GetNumItems () > 0));					break;										default:					EnableItem (kIDRightToLeft, (BOOL) (fRightList->GetNumSelections () > 0));						break;			}			break;								case kIDLeftToRight:			n = fLeftList->MoveSelection (fRightList);			EnableItem (item, (BOOL)((fLeftList->GetNumItems () > fMinInLeftList) 				&& (fLeftList->GetNumSelections () > 0)));						EnableItem (kIDAllLeft, (BOOL)(fLeftList->GetNumItems () > 0));			EnableItem (kIDAllRight, (BOOL)(fRightList->GetNumItems () > 0));			break;				case kIDRightToLeft:			n = fRightList->MoveSelection (fLeftList);			EnableItem (item, (BOOL)((fRightList->GetNumItems () > 0) && (fRightList->GetNumSelections () > 0)));						EnableItem (kIDAllLeft, (BOOL)(fLeftList->GetNumItems () > 0));			EnableItem (kIDAllRight, (BOOL)(fRightList->GetNumItems () > 0));			break;					case kIDAllLeft:			fLeftList->SelectAll ();			EnableItem (kIDLeftToRight, TRUE);			break;               		case kIDAllRight:			fRightList->SelectAll ();			EnableItem (kIDRightToLeft, TRUE);			break;               									default:			processed = FALSE;			break;	}		// Left list needs a minimum of elements	EnableItem (ok, (BOOL)(fLeftList->GetNumItems () >= fMinInLeftList)); 	return processed;}void TTwoListDialog::Setup (){#ifdef Macintosh	fLeftList = new VListBox (this, kIDLeftList);#else	fLeftList = new VListBox;   this->Associate (fLeftList, kIDLeftList);#endif	fLeftList->Append ("alpha");	fLeftList->Append ("beta");	fLeftList->Append ("gamma");	fLeftList->Append ("delta");#ifdef Macintosh	fRightList = new VListBox (this, kIDRightList);#else	fRightList = new VListBox;   this->Associate (fRightList, kIDRightList);#endif	fRightList->Append ("aus");	fRightList->Append ("bus b");	fRightList->Append ("cus");	fRightList->Append ("dus");}TTwoListDialog::TTwoListDialog (const unsigned int minInLeftList) { 	fMinInLeftList = minInLeftList; }TTwoListDialog::~TTwoListDialog (){	// delete (fLeftList); // JLT 010417	// delete (fRightList); // JLT 010417}#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif