#include "TLeafSet.h"int TLeafSet::Compare (const TSortable& obj) const{	CHECK (Class () == obj.Class ());	const TLeafSet& leafSet = (const TLeafSet&)obj;	return (fBitSet.Compare (leafSet.fBitSet));}void TLeafSet::Copy (const TObject& obj){	CHECK (Class () == obj.Class ());	const TLeafSet& leafSet = (const TLeafSet&)obj;	fBitSet.Copy (leafSet.fBitSet);}bool TLeafSet::IsEqual (const TObject& obj) const{	CHECK (Class () == obj.Class ());	const TLeafSet& leafSet = (const TLeafSet&) obj;	return (fBitSet.IsEqual (leafSet.fBitSet));}TLeafSet& TLeafSet::operator = (const TLeafSet& leafSet){	fBitSet = leafSet.fBitSet;	return (*this);}TLeafSet& TLeafSet::operator += (const TLeafSet& leafSet){	AddToThis (leafSet);	return (*this);}TLeafSet& TLeafSet::operator += (const unsigned int leaf){	AddToThis (leaf);	return (*this);}TLeafSet& TLeafSet::operator *= (const TLeafSet& leafSet){	IntersectWithThis (leafSet);	return (*this);}TLeafSet& TLeafSet::operator *= (const unsigned int leaf){	IntersectWithThis (leaf);	return (*this);}TLeafSet& TLeafSet::operator -= (const TLeafSet& leafSet){	SubtractFromThis (leafSet);	return (*this);}TLeafSet& TLeafSet::operator -= (const unsigned int leaf){	SubtractFromThis (leaf);	return (*this);}TLeafSet TLeafSet::operator  + (const TLeafSet& leafSet) const{	TLeafSet s;    Union (leafSet, s);	return (s);}					TLeafSet TLeafSet::operator  * (const TLeafSet& leafSet) const{	TLeafSet s;    Intersection (leafSet, s);		return (s);}TLeafSet TLeafSet::operator  - (const TLeafSet& leafSet) const{	TLeafSet s;    SetDifference (leafSet, s);		return (s);}// is this function well behaved...void TLeafSet::ShiftLeaves (const unsigned int positions){	CHECK_ (LastLeaf () + positions <= kMaxLeaves);		TLeafSet leafSet (*this);	SetEmpty ();	for (unsigned int leaf = leafSet.FirstLeaf (); leaf; leaf = leafSet.NextLeaf ())		AddToThis (leaf + positions);}					