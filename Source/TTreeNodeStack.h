#ifndef __TTREENODESTACK_H_#define __TTREENODESTACK_H_#include "TTreeNode.h"#include "TStack.h"class TTreeNodeStack{	public:		TTreeNodeStack (void);		TTreeNodeStack (const TTreeNodeStack& treeNodeStack);		virtual ~TTreeNodeStack (void);		virtual void 							DeleteAll (void) { fStack.DeleteAll (); };		virtual unsigned int						GetItems (void) const { return (fStack.GetItems ()); };		virtual bool							IsEmpty (void) const { return (fStack.IsEmpty ()); };		virtual TTreeNodeStack&					operator = (const TTreeNodeStack& treeNodeStack);				virtual void 							Pop (void) { fStack.Pop (); };		virtual void 							Pop (TTreeNode*& item);		virtual void 							Push (TTreeNode* item) { fStack.Push (item); };		virtual void 							Top (const TTreeNode*& item) const;	protected:		TStack									fStack;};#endif // __TTREENODESTACK_H_