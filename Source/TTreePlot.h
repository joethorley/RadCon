#ifndef __TTREEPLOT_H#define __TTREEPLOT_H#include "TPlot.h"#include "VPort.h"#include "TChecks.h"#include "TString.h"#include "TFlags.h"#include <stringfwd.h>#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreeStyle ___#endifclass TTreeStyle : protected TFlags{	public:		enum		{			kDrawName		= 0x0001,			kRectangular 	= 0x0002		};				enum NodeHeights		{			kZero,			kDepth,			kCardinality,			kTopDown,			kBottomUp		};				TTreeStyle (void);		TTreeStyle (const TTreeStyle& treeStyle);		virtual ~TTreeStyle (void);		virtual NodeHeights						GetNodeHeights (void) const { return (fNodeHeights); };			virtual void							SetNodeHeights (const NodeHeights nodeHeights = kCardinality) { fNodeHeights = nodeHeights; };						virtual bool 							IsRectangular (void) const { return (IsFlag (kRectangular)); };		virtual void							SetRectangular (const bool rectangular = true) { SetFlag (kRectangular, rectangular); };		virtual bool 							IsDrawName (void) const { return (IsFlag (kDrawName)); };		virtual void 							SetDrawName (const bool drawName = true) { return (SetFlag (kDrawName, drawName)); };				TTreeStyle& 							operator = (const TTreeStyle& treeStyle);		protected:		NodeHeights								fNodeHeights;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TTreePlot ___#endif// used by TTree to draw itself in windows// use the functions in the following order// 1) SetUp: need to first tell it the treestyle, the size of window and fonts// 2) SetRooted: tell it if the tree is rooted// 2) SetTreeName: tell it the name of the tree. it will draw it in the window depending on the tree style// 3) SetLeaf: tell it the names of all the leaves. essential for allocating space and knowing the actual number// 4) SetLeafHeight: all the leaves must be the same height, tell it their height, also tells it that finished leavesclass TTreePlot : public TRect, protected TFlags{		public:			enum		{			kRooted = 0x0001		};			TTreePlot (void);		TTreePlot (const TTreePlot& treePlot);		~TTreePlot (void);		virtual void 						DrawLabel (const TPoint point, const TString& label, const bool isLeaf) const;		virtual void						DrawLine (const TPoint pointA, const TPoint pointB) const;		virtual float						GetNodeGap (void) const { return (fNodeGap); };		virtual float						GetLeafGap (void) const { return (fLeafGap); };		virtual const TTreeStyle			GetTreeStyle (void) const { return (fTreeStyle); };				virtual unsigned int				GetLeaves (void) const { return (fLeaves); };				virtual Coordinate					GetCurLeafY (void) const;		virtual Coordinate					GetLastLeafY (void) const { return (fLastLeafY); };				virtual bool						IsRooted (void) const { return (IsFlag (kRooted)); };				TTreePlot&							operator = (const TTreePlot& treePlot);					virtual void						SetLeafHeight (const unsigned int height) const;		virtual void						SetRooted (const bool rooted = true) const { CHECK_ (!fLeaves); ((TTreePlot*)this)->SetFlag (kRooted, rooted); };						virtual void 						SetLeafName (const TString& leafName) const;		virtual void 						SetUp (VRect rect, VFontPtr labelFont, const TTreeStyle& treeStyle, VFontPtr edgeFont = NULL) const;		// JLT 010412		virtual void 						SetTreeName (const string& treeName) const;			protected:		unsigned int 						fLeaves;		unsigned int						fLeafHeight;		unsigned int						fCount;				Coordinate 							fLastLeafY;		Coordinate							fMaxLeafName;		float								fNodeGap;		float								fLeafGap;		VFont*								fLabelFont;		VFont*								fEdgeFont;				TTreeStyle							fTreeStyle;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TTREEPLOT_H