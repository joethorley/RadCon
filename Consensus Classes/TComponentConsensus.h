#ifndef __TCOMPONENTCONSENSUS_H#define __TCOMPONENTCONSENSUS_H#include "TIntersectionConsensus.h"#include "TClusterHashTable.h"#include "TClusterList.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TComponentConsensus ___#endif// the upper limit on this class is the number of leaves in a TLeafSet->TCluster// and the number of separate TClusters that can be stored in the clusterhashtable// and TClusterList at the end// note cannot exceed USHRT_MAX = 65535U// the number in TClusterHashTable is 65535U in for each hashvalue of which there are 1991 hashvalues// should give error message is exceededclass TComponentConsensus : public TIntersectionConsensus{	public:		TComponentConsensus (const TSourceTreesFile* sourceTreesFile);		TComponentConsensus (const TComponentConsensus& componentConsensus);		virtual ~TComponentConsensus (void) { };		virtual void							Consensus (void);		virtual const char*						GetProgressBarName (void) const { return ("Component Consensus"); };			protected:		virtual void							addTree (void) { traverseAddTree (fCurSourceTree.GetRoot ()); };		virtual void							traverseAddTree (const TTreeNode* n);		TClusterHashTable*						fClusterHashTable;		TClusterList*							fClusterList;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TStrictComponentConsensus ___#endifclass TStrictComponentConsensus : public TComponentConsensus{	public:		TStrictComponentConsensus (const TSourceTreesFile* sourceTreesFile);		TStrictComponentConsensus (const TStrictComponentConsensus& strictComponentConsensus);		virtual ~TStrictComponentConsensus (void) { };		virtual ClassType 						Class (void) const { return (kTStrictComponentConsensusClass); };		virtual TObject*						Clone (void) const { return (new TStrictComponentConsensus (*this)); };		virtual void							Consensus (void);		virtual const char*						GetName (void) const { return ("Strict Component Consensus"); };									};#define TMAJORITYRULECOMPONENTCONSENSUS_FLAG_MINORITYCOMPATIBLECOMPONENTS 	0x0010#define TMAJORITYRULECOMPONENTCONSENSUS_FLAG_SHOWDIFFERENCES				0x0020		#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TMajorityRuleComponentConsensus ___#endifclass TMajorityRuleComponentConsensus : public TComponentConsensus{	public:		TMajorityRuleComponentConsensus (const TSourceTreesFile* sourceTreesFile, const bool minorityCompatibleComponents = false, const bool showDifferences = false);		TMajorityRuleComponentConsensus (const TMajorityRuleComponentConsensus& majorityRuleComponentConsensus);		virtual ~TMajorityRuleComponentConsensus (void) { };		virtual void							Consensus (void);		virtual ClassType 						Class (void) const { return (kTMajorityRuleComponentConsensusClass); };		virtual TObject*						Clone (void) const { return (new TMajorityRuleComponentConsensus (*this)); };		virtual const char*						GetName (void) const { return ("Majority Rule Component Consensus"); };									};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TSemiStrictComponentConsensus ___#endifclass TSemiStrictComponentConsensus : public TComponentConsensus{	public:		TSemiStrictComponentConsensus (const TSourceTreesFile* sourceTreesFile);		TSemiStrictComponentConsensus (const TSemiStrictComponentConsensus& semiStrictComponentConsensus);		virtual ~TSemiStrictComponentConsensus (void) { };		virtual void							Consensus (void);		virtual ClassType 						Class (void) const { return (kTSemiStrictComponentConsensusClass); };		virtual TObject*						Clone (void) const { return (new TSemiStrictComponentConsensus (*this)); };		virtual const char*						GetName (void) const { return ("Semi Strict Component Consensus"); };									};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TCOMPONENTCONSENSUS_H