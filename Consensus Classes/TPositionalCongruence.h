#ifndef __TPOSITIONALCONGRUENCE_H#define __TPOSITIONALCONGRUENCE_H#include "TQuartetConsensus.h"// this class uses unsigned long to store for each leaf the number of quartets// that contain the leaf and explicitly agree i.e. are resolved and of the same type in all the trees// the limits are for rooted and unrooted trees with 1500 and 500 leaves, respectively// maximum value of unsigned long ULONG_MAX = 4294967295U// unrooted quartets containing a leaf = 499 * 498 * 497/ 6 = 20584249U// rooted quartets containing a leaf = 1499 * 1498 / 2 = 1122751U#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TPositionalCongruence ___#endifclass TPositionalCongruence : public TQuartetConsensus{	public:		TPositionalCongruence (const TSourceTreesFile* sourceTreesFile);		TPositionalCongruence (const TPositionalCongruence& positionalCongruence);		virtual ~TPositionalCongruence (void);				virtual ClassType 						Class (void) const { return (kTPositionalCongruenceClass); };		virtual TObject*						Clone (void) const { return (new TPositionalCongruence (*this)); };				virtual char*							GetName (void) const { return ("Positional Congruence"); };			virtual ostream&						Write (ostream& o) const;					protected:		virtual void 							averageQuartets (void);		virtual void 							storeQuartets (void);		TArray<unsigned long>*					fExplicitlyAgreeing;		TArray<double>*							fEASimilarity;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TPOSITIONALCONGRUENCE_H