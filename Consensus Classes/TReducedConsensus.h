#ifndef __TREDUCEDCONSENSUS_H#define __TREDUCEDCONSENSUS_H#include "TIntersectionConsensus.h"#include "TSplitSet.h"#include "TBTree.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TReducedConsensus ___#endifclass TReducedConsensus : public TIntersectionConsensus{	public:		TReducedConsensus (const TSourceTreesFile* sourceTreesFile) : TIntersectionConsensus (sourceTreesFile) { };		TReducedConsensus (const TReducedConsensus& reducedConsensus) : TIntersectionConsensus (reducedConsensus) { CHECK_ (0); };		virtual ~TReducedConsensus (void) { };				virtual bool							IsProfileEmpty (void) const = 0;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TStrictReducedConsensus ___#endif// the upper limit on this class is the number of leaves in a TLeafSet and // the number of splits that can be held in the splitset which cannot exceed USHRT_MAX// the program will exit is any attempt to exceed this is made// note the number of basic trees cannot exceed the number of splits left at the endclass TStrictReducedConsensus : public TReducedConsensus{	public:		TStrictReducedConsensus (const TSourceTreesFile* sourceTreesFile);		TStrictReducedConsensus (const TStrictReducedConsensus& strictReducedConsensus);		virtual ~TStrictReducedConsensus (void);				virtual void							Consensus (void);		virtual ClassType 						Class (void) const { return (kTStrictReducedConsensusClass); };		virtual TObject*						Clone (void) const { return (new TStrictReducedConsensus (*this)); };				virtual bool							IsProfileEmpty (void) const { return (!GetTrees ()); };		virtual char*							GetName (void) const { return ("Strict Reduced Consensus"); };				virtual unsigned int					GetNumberOfBasicTrees (void) const { return (fBasicTrees); };		virtual unsigned int					GetNumberOfDerivativeTrees (void) const { return (fTreesBlock->GetTrees () - fBasicTrees); };								protected:			virtual void							getSplitSet (const TTreeNode* node, TSplitSet& splitSet);				virtual void 							intersectSplits (void);		virtual bool 							isInProfile (const TItemSet& trees);		virtual void							addTree (void);				virtual void 							makeBasicForest (void);			virtual void 							makeDerivativeForest (void);			virtual bool 							getDerivativeSplitSet (TItemSet trees, TSplitSet& splitSet);				TSplitSet*								fIntersectionSplitSet;		TSplitSet*								fConsensusSplitSet;		TSplitSet								fTreeSplitSet;		TSplitSet								fIntermediateSplitSet;				TSplitSet								fSplitSetA;		TSplitSet								fSplitSetB;				unsigned int								fBasicTrees;				TArray<TItemSet>*						fSplitItemSets; // this where store the set of splits in the basic tree		TVArray<TItemSet>						fTreeItemSets; // this where store the sets of basic trees that each derivative (and basic) tree is derived from};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TREDUCEDCONSENSUS_H 