#include "TPositionalCongruence.h"#include "TTabString.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifvoid TPositionalCongruence::averageQuartets (void){	const unsigned long quartets = fQuartetSet.GetQuartets (true);		for (unsigned short leaf = 1; leaf <= fConsensusLeafSet.GetLeaves (); ++leaf)		fEASimilarity->IthItemRef (leaf) = ((double)fExplicitlyAgreeing->IthItemRef (leaf) / (double)quartets);}void TPositionalCongruence::storeQuartets (void){	const TQuartet* quartet;	for (fQuartetSet.FirstQuartetCurPartition (); fQuartetSet.CurQuartetCurPartition (quartet); fQuartetSet.NextQuartetCurPartition ())	{				if (quartet->IsResolved ())		{				fExplicitlyAgreeing->IthItemRef (quartet->A ()) += 1;			fExplicitlyAgreeing->IthItemRef (quartet->B ()) += 1;			fExplicitlyAgreeing->IthItemRef (quartet->C ()) += 1;			if (!IsRooted ())				fExplicitlyAgreeing->IthItemRef (quartet->D ()) += 1;		}	}}TPositionalCongruence::TPositionalCongruence (const TSourceTreesFile* sourceTreesFile)	:	TQuartetConsensus (sourceTreesFile){	CHECK_ (fSourceLeafSet.GetLeaves () >= (IsRooted () ? 3 : 4));	CHECK_ (fSourceLeafSet.GetLeaves () <= (IsRooted () ? 1500: 500));		fEASimilarity = new TArray<double> (fSourceLeafSet.GetLeaves (), 0);	fExplicitlyAgreeing = new TArray<unsigned long> (fSourceLeafSet.GetLeaves (), 0);}TPositionalCongruence::TPositionalCongruence (const TPositionalCongruence& positionalCongruence)	:	TQuartetConsensus (positionalCongruence){	CHECK_ (0);}ostream& TPositionalCongruence::Write (ostream& o) const{	TTabString tabString (kFileWidth);				tabString.SetTab (14);		tabString.SetNewLine ();				tabString.AddToThis ("Leaf");	tabString.AddToken ("EA Similarity");	tabString.SetNewLine ();	tabString.WriteToLog ();	tabString.SetNull (); // have to set null as memory allocation problems...			unsigned int i = 0;	TString string;	double averageEA = 0;		while (fConsensusLeafSet.IthLeaf (++i))	{		tabString.AddToken (fTaxaBlock->GetLeafName (fConsensusLeafSet.IthLeaf (i)));		string.SetNull ();		string.AddToThis ((float)fEASimilarity->IthItemRef (i), 4);		tabString.AddToThis (string);		averageEA += fEASimilarity->IthItemRef (i);		tabString.SetNewLine ();		tabString.WriteToLog ();		tabString.SetNull ();	}	tabString.AddToThis ("Average");	string.SetNull ();	string.AddToThis ((float)(averageEA / (double)fConsensusLeafSet.GetLeaves ()), 4);	tabString.AddToThis (string);	tabString.WriteToLog ();		return (o);}TPositionalCongruence::~TPositionalCongruence (void){	if (fEASimilarity)	{		delete (fEASimilarity);		delete (fExplicitlyAgreeing);	}}#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif