#include "TLeafStability.h"#include "TTabString.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifvoid TLeafStability::averageQuartets (void){	const unsigned long quartets = fQuartetSet.GetQuartets (true);		for (unsigned short leaf = 1; leaf <= fConsensusLeafSet.GetLeaves (); ++leaf)	{		if (fMaximum)			fMaximum->IthItemRef (leaf) = (fMaximum->IthItemRef (leaf) / (double)quartets);		if (fDifference)			fDifference->IthItemRef (leaf) = (fDifference->IthItemRef (leaf) / (double)quartets);		if (fEntropy)			fEntropy->IthItemRef (leaf) = (fEntropy->IthItemRef (leaf) / (double)quartets);	}}void TLeafStability::storeQuartets (void){	const TQuartet* quartet;	for (fQuartetSet.FirstQuartetCurPartition (); fQuartetSet.CurQuartetCurPartition (quartet); fQuartetSet.NextQuartetCurPartition ())	{		double stability;				if (fMaximum)		{			stability = quartet->GetMaximum ();			fMaximum->IthItemRef (quartet->A ()) += stability;			fMaximum->IthItemRef (quartet->B ()) += stability;			fMaximum->IthItemRef (quartet->C ()) += stability;			if (!IsRooted ())				fMaximum->IthItemRef (quartet->D ()) += stability;		}		if (fDifference)		{			stability = quartet->GetDifference ();			fDifference->IthItemRef (quartet->A ()) += stability;			fDifference->IthItemRef (quartet->B ()) += stability;			fDifference->IthItemRef (quartet->C ()) += stability;			if (!IsRooted ())				fDifference->IthItemRef (quartet->D ()) += stability;		}		if (fEntropy)		{			stability = quartet->GetInformation ();			fEntropy->IthItemRef (quartet->A ()) += stability;			fEntropy->IthItemRef (quartet->B ()) += stability;			fEntropy->IthItemRef (quartet->C ()) += stability;			if (!IsRooted ())				fEntropy->IthItemRef (quartet->D ()) += stability;		}	}}TLeafStability::TLeafStability (const TSourceTreesFile* sourceTreesFile, const bool maximum, const bool difference, const bool entropy)	: 	TQuartetConsensus (sourceTreesFile){	CHECK_ (maximum || difference || entropy);	CHECK_ (fSourceLeafSet.GetLeaves () >= (IsRooted () ? 3 : 4));	CHECK_ (fSourceLeafSet.GetLeaves () <= (IsRooted () ? 1500: 500));		fMaximum = (maximum ?  new TArray<double> (fSourceLeafSet.GetLeaves (), 0) : NULL);	fDifference = (difference ?  new TArray<double> (fSourceLeafSet.GetLeaves (), 0) : NULL);	fEntropy = (entropy ?  new TArray<double> (fSourceLeafSet.GetLeaves (), 0) : NULL);}TLeafStability::TLeafStability (const TLeafStability& leafStability)	: 	TQuartetConsensus (leafStability){	CHECK_ (0);}ostream& TLeafStability::Write (ostream& o) const{		TTabString tabString (kFileWidth);				tabString.SetTab (14);	tabString.SetTab (28);	tabString.SetTab (42);		tabString.SetNewLine ();				tabString.AddToThis ("Leaf");	if (fMaximum)		tabString.AddToThis ("Maximum");	if (fDifference)		tabString.AddToThis ("Difference");	if (fEntropy)		tabString.AddToThis ("Entropy");	tabString.SetNewLine ();	tabString.WriteToLog ();	tabString.SetNull (); // have to set null as memory allocation problems...			unsigned short i = 0;	TString string;	double averageMaximum = 0;	double averageDifference = 0;	double averageEntropy = 0;		while (fConsensusLeafSet.IthLeaf (++i))	{		tabString.AddToken (fTaxaBlock->GetLeafName (fConsensusLeafSet.IthLeaf (i)));		if (fMaximum)		{			string.SetNull ();			string.AddToThis ((float)fMaximum->IthItemRef (i), 4);			tabString.AddToThis (string);			averageMaximum += fMaximum->IthItemRef (i); 		}		if (fDifference)		{			string.SetNull ();			string.AddToThis ((float)fDifference->IthItemRef (i), 4);			tabString.AddToThis (string);			averageDifference += fDifference->IthItemRef (i);		}		if (fEntropy)		{			string.SetNull ();			string.AddToThis ((float)fEntropy->IthItemRef (i), 4);			tabString.AddToThis (string);			averageEntropy += fEntropy->IthItemRef (i);		}		tabString.SetNewLine ();		tabString.WriteToLog ();		tabString.SetNull ();	}	tabString.AddToThis ("Average");	if (fMaximum)	{		string.SetNull ();		string.AddToThis (((float)(averageMaximum / (double)fConsensusLeafSet.GetLeaves ())), 4);		tabString.AddToThis (string);	}	if (fDifference)	{		string.SetNull ();		string.AddToThis (((float)(averageDifference / (double)fConsensusLeafSet.GetLeaves ())), 4);		tabString.AddToThis (string);	}	if (fEntropy)	{		string.SetNull ();		string.AddToThis (((float)(averageEntropy / (double)fConsensusLeafSet.GetLeaves ())), 4);		tabString.AddToThis (string);	}	tabString.WriteToLog ();		return (o);}TLeafStability::~TLeafStability (void) {	if (fMaximum)		delete (fMaximum);	if (fDifference)		delete (fDifference);	if (fEntropy)		delete (fEntropy); }#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif