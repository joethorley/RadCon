#ifndef __TADAMSCONSENSUS_H#define __TADAMSCONSENSUS_H#include "TIntersectionConsensus.h"#include "TPartition.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TAdamsConsensus ___#endif// this class uses space efficient but time inefficient algorithm// the maximum number of leaves it can handle is MAX_UINT = 65353U// KMaxLeaves = 500U and the minimum number of leaves = 3class TAdamsConsensus : public TIntersectionConsensus{	public:		TAdamsConsensus (const TSourceTreesFile* sourceTreesFile);		TAdamsConsensus (const TAdamsConsensus& adamsConsensus) : TIntersectionConsensus (adamsConsensus) { CHECK_ (0); };		virtual ~TAdamsConsensus (void);		virtual ClassType 						Class (void) const { return (kTAdamsConsensusClass); };		virtual TObject* 						Clone (void) const { return (new TAdamsConsensus (*this)); };				virtual void							Consensus (void);		virtual char*							GetName (void) const { return ("Adams Consensus"); };										protected:		virtual void							addTree (void);		virtual void							consensusTraverse (const TTreeNode* n, VMonitor* monitor);				TPartition 								fPartition;		unsigned short							fCount;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TADAMSCONSENSUS_H 