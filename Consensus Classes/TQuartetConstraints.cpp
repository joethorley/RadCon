#include "TQuartetConstraints.h"#include "TTabString.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifvoid TQuartetConstraints::Consensus (void){	fostream << "#nexus" << EOLN << EOLN;	fostream << "begin paup;" << EOLN;	TString name = fFileName.Array ();	if (27 < name.Length ())		name.SetLength (27);	fostream << "log file = " << name.Array () << ".log start replace;" << EOLN;	TQuartetConsensus::Consensus ();	fostream << "set autoclose;" << EOLN;		if (IsFlag (kHSearch))		for (unsigned long int i = 1; i <= fQuartetsDone; ++i)			fostream << "hsearch constraints = quartet" << i << " enforce converse addseq=random nreps=10 rseed=1;" << EOLN;	else		for (unsigned long int i = 1; i <= fQuartetsDone; ++i)			fostream << "bandb constraints = quartet" << i << " enforce converse addseq=simple;" << EOLN;	fostream << "log stop;" << EOLN;	fostream << "endblock;" << EOLN;}void TQuartetConstraints::storeQuartets (void){	const TQuartet* quartet;	for (fQuartetSet.FirstQuartetCurPartition (); fQuartetSet.CurQuartetCurPartition (quartet); fQuartetSet.NextQuartetCurPartition ())	{		QuartetType quartetType = quartet-> GetQuartetType ().GetQuartetType ();		if (quartetType != kZero)		{			fostream << "constraints quartet" << ++fQuartetsDone << " backbone = " << (IsRooted () ? "(((" : "((");						switch (quartetType)			{				case kOne:					fostream << fTaxaBlock->GetLeafName (quartet->A ());					fostream << ",";					fostream << fTaxaBlock->GetLeafName (quartet->B ()) << "),";					fostream << fTaxaBlock->GetLeafName (quartet->C ()) << (IsRooted () ? ")," : ",");					break;									case kTwo:					fostream << fTaxaBlock->GetLeafName (quartet->A ());					fostream << ",";					fostream << fTaxaBlock->GetLeafName (quartet->C ()) << "),";					fostream << fTaxaBlock->GetLeafName (quartet->B ()) << (IsRooted () ? ")," : ",");					break;										case kThree:					fostream << fTaxaBlock->GetLeafName (quartet->B ());					fostream << ",";					fostream << fTaxaBlock->GetLeafName (quartet->C ()) << "),";					fostream << fTaxaBlock->GetLeafName (quartet->A ()) << (IsRooted () ? ")," : ",");					break;									default:					CHECK_ (0);					break;						}			fostream << (IsRooted () ? fOutgroup.Array () : fTaxaBlock->GetLeafName (quartet->D ()).Array ()) << ");" << EOLN; 		}	}}TQuartetConstraints::TQuartetConstraints (const TSourceTreesFile* sourceTreesFile, ostream& o, const TString fileName, const bool hsearch, const unsigned int outgroup)	:	TQuartetConsensus (sourceTreesFile)	,	fostream (o)	,	fFileName (fileName)	, 	fQuartetsDone (0){	CHECK_ (IsRooted () ? outgroup && fSourceLeafSet.IsLeaf (outgroup) : !outgroup);		SetFlag (kHSearch, hsearch);		if (IsRooted ())	{		fOutgroup = fTaxaBlock->GetLeafName (fLeafMap.GetMapping (outgroup));		fTaxaBlock->PruneLeaf (fLeafMap.GetMapping (outgroup));		fSourceLeafSet -= outgroup;		fToPrune += outgroup;		fConsensusLeafSet.SetFull (fSourceLeafSet.GetLeaves ());				fLeafMap.SetMapping (fTaxaBlock->GetLeafSet (), fConsensusLeafSet);		fTaxaBlock->MapLeaves (fLeafMap);		fLeafMap.SetMapping (fSourceLeafSet, fConsensusLeafSet);				fConsensusTree.StarTree (fConsensusLeafSet);	}}TQuartetConstraints::TQuartetConstraints (const TQuartetConstraints& quartetConstraints)	:	TQuartetConsensus (quartetConstraints)	,	fostream (quartetConstraints.fostream)	,	fOutgroup (quartetConstraints.fOutgroup)	,	fFileName (quartetConstraints.fFileName)	,	fQuartetsDone (quartetConstraints.fQuartetsDone){	CHECK_ (0);}TQuartetConstraints::~TQuartetConstraints (void){}#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif