#ifndef __TLEAFSTABILITY_H#define __TLEAFSTABILITY_H#include "TQuartetConsensus.h"// this class calculates the stabilities of all quartets which are normalised i.e. lie between 1 and 0// it uses double to sum for each leaf the stabilities of all the quartets containing the leaf// the maximum sum for rooted and unrooted trees is// 1499 * 1498 / 2 = 1122751U (1 * 10^6)// 499 * 498 * 497 / 6 = 20584249U (2 * 10^7)// it assumes that 15 digits DBL_DIG = 15 gives accuracy to 0.00001 which is precise enough// note not portable as DBL_DIG = 10 on other compilers#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TLeafStability ___#endifclass TLeafStability : public TQuartetConsensus{	public:		TLeafStability (const TSourceTreesFile* sourceTreesFile, const bool maximum = true, const bool difference = true, const bool entropy = true);		TLeafStability (const TLeafStability& leafStability);		virtual ~TLeafStability (void);		virtual ClassType 						Class (void) const { return (kTLeafStabilityClass); };		virtual TObject*						Clone (void) const { return (new TLeafStability (*this)); };				virtual char*							GetName (void) const { return ("Leaf Stability"); };						virtual ostream&						Write (ostream& o) const;			protected:		virtual void							averageQuartets (void);		virtual void							storeQuartets (void);		TArray<double>*							fMaximum;		TArray<double>*							fDifference;		TArray<double>*							fEntropy;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TLEAFSTABILITY_H