#ifndef __TPLOT_H#define __TPLOT_H#include "VPort.h"#include "TChecks.h"typedef int Coordinate;#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TPoint ___#endifclass TPoint{	public:		TPoint (const Coordinate x = 0, const Coordinate y = 0);		TPoint (const TPoint& point);		TPoint (const PoinT& point);		virtual ~TPoint (void);													virtual Coordinate 					GetX (void) const { return (fX); };		virtual Coordinate 					GetY (void) const { return (fY); };				virtual void						SetX (const Coordinate x) { fX = x; };		virtual void						SetY (const Coordinate y) { fY = y; };		virtual void						SetPoint (const Coordinate x, const Coordinate y);				TPoint&								operator = (const TPoint&);		TPoint&								operator = (const PoinT&);		PoinT								GetPoinT (void) const;   			protected:		Coordinate 							fX;		Coordinate 							fY;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TRect ___#endifclass TRect{	public:		TRect (void);		TRect (const Coordinate left, const Coordinate top, const Coordinate right, const Coordinate bottom);		TRect (const TRect&);		TRect (const Rect&);		TRect (VRect&);		virtual ~ TRect (void);		virtual Coordinate					GetBottom (void) const { return (fRect.bottom);  };		virtual Coordinate					GetLeft (void) const { return (fRect.left);  };		virtual Coordinate					GetRight (void) const { return (fRect.right);  };		virtual Coordinate					GetTop (void) const { return (fRect.top);  };		virtual Coordinate					GetHeight (void) const { return (GetBottom () - GetTop ()); };		virtual Coordinate					GetWidth (void) const { return (GetRight () - GetLeft ()); };		virtual const Rect&					GetRect (void) const { return (fRect); };		virtual VRect						GetVRect (void) const;		virtual void 						Inset (const Coordinate dx, const Coordinate dy);		virtual bool 						IsPointInRect (const TPoint& pt) const;		virtual void 						Offset (const Coordinate dx, const Coordinate dy);		TRect&								operator = (const TRect& rect) { return (operator = (rect.GetRect ())); };		TRect&								operator = (const Rect& rect);		TRect&								operator = (VRect& rect);		virtual void						SetBottom (const Coordinate i) { fRect.bottom = i; };		virtual void						SetLeft (const Coordinate i) { fRect.left = i; };		virtual void						SetRight (const Coordinate i) { fRect.right = i; };		virtual void						SetTop (const Coordinate i) { fRect.top = i; };		virtual void						SetRect (Coordinate left, const Coordinate top, const Coordinate right, const Coordinate bottom) { ::SetRect (&fRect, left, top, right, bottom); };		virtual void						SetRect (const TRect& rect) { SetRect (rect.fRect); };		virtual void						SetRect (const Rect& rect) { ::SetRect (&fRect, rect.left, rect.top, rect.right, rect.bottom); };		virtual void						SetRect (VRect& rect) { ::SetRect (&fRect, (Coordinate)rect.GetLeft (), (Coordinate)rect.GetTop (), (Coordinate)rect.GetRight (), (Coordinate)rect.GetBottom ()); };			protected:			Rect 								fRect;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif // __TPLOT_H