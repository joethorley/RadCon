#include "TMemMgr.h"TMarker::~TMarker (void){        CHECK_ (fBlk < fMemStk.Count () || (fBlk == fMemStk.Count() && fCurLoc <= fMemStk.fCurLoc));    fMemStk.FreeTo (fBlk);    fMemStk.fCurLoc = fCurLoc;}int TBaseMemBlocks::AllocBlock (size_t sz){    TBlockList* temp = new (max(sz,fBlockSize)) TBlockList (fCurBlock-1);    if (temp == 0)        return (0);    fCurBlock = temp + 1;    fBlockCount++;    return (1);}void TBaseMemBlocks::FreeTo (unsigned term){    CHECK (fBlockCount >= term);    while (fBlockCount > term)  	{        TBlockList* temp = fCurBlock-1;        fCurBlock = (temp->fNext)+1;        delete temp;        fBlockCount--;    }}void* TMemStack::Allocate (size_t sz){    sz = max ((size_t)1, sz);    if (sz > fBlockSize - fCurLoc)        if (AllocBlock (sz) == 0)            return (0);        else            fCurLoc = 0;    void* temp = Block () + fCurLoc;    fCurLoc += sz;    return temp;}