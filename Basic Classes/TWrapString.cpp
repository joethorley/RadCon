#include "TWrapString.h"// treats as single token...void TWrapString::AddToken (const TString& token){//	CHECK_ (token.IsToken (" \t\n"));		CHECK_ (!IsBreakTokens ()); // change so breaks token		if (IsSpaceTokens () && !IsNewLine ())	{		if (fLineLength < (fCurCharacter += 1))			SetNewLine ();		else			fString.AddToThis (' ');		}		if (IsNewLine ())	{		fString.AddToThis (token);		if (fLineLength < (fCurCharacter += token.Length ()))			SetNewLine ();	}	else if (fLineLength < (fCurCharacter += token.Length ()))	{		SetNewLine ();		AddToken (token);		}	else		fString.AddToThis (token);}// really should tokenise the input strings and treat as separate strings...void TWrapString::AddToThis (const TString& string){		CHECK_ (string.IsToken (" \t\n")); // change so tokenises	TString token = string;	AddToken (token);}void TWrapString::AddToThis (const char* str){	CHECK_ (str);	TString string (str);	AddToThis (string);}void TWrapString::AddToThis (const char ch){	CHECK_ (ch != EOLN && ch != '\0');	if (fLineLength < (fCurCharacter += 1))	{		SetNewLine ();		fCurCharacter = 1;	}	fString.AddToThis (ch);}void TWrapString::SetNewLine (void) { 	fString.AddToThis (EOLN);	++fLines;	fCurCharacter = 0;}void TWrapString::Copy (const TObject& obj){	CHECK_ (Class () == obj.Class ());	const TWrapString& wrapString = (const TWrapString&)obj;		fString.Copy (wrapString.fString);	fCurCharacter = wrapString.fCurCharacter;	fLineLength = wrapString.fLineLength;	fLines = wrapString.fLines;	}void TWrapString::SetNull (void){	fString.SetNull ();	fLines = 0;	fCurCharacter = 0;}TWrapString& TWrapString::operator = (const TWrapString& wrapString){	fString = wrapString.fString;	fCurCharacter = wrapString.fCurCharacter;	fLineLength = wrapString.fLineLength;	fLines = wrapString.fLines;	return (*this);}TWrapString::TWrapString (const long int lineLength)	: fString (lineLength, lineLength){	CHECK_ (lineLength);	fCurCharacter = 0;	fLineLength = lineLength;	fLines = 0;		SetFlag (TWRAPSTRING_FLAG_BREAKTOKENS, false); 	SetFlag (TWRAPSTRING_FLAG_SPACETOKENS, true);	}	TWrapString::TWrapString (const TWrapString& wrapString)	: fString (wrapString.fString){		fCurCharacter = wrapString.fCurCharacter;	fLineLength = wrapString.fLineLength;	fLines = wrapString.fLines;		SetFlag (TWRAPSTRING_FLAG_BREAKTOKENS, wrapString.IsFlag (TWRAPSTRING_FLAG_BREAKTOKENS)); 	SetFlag (TWRAPSTRING_FLAG_SPACETOKENS, wrapString.IsFlag (TWRAPSTRING_FLAG_SPACETOKENS));	}