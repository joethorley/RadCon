#include "TPlot.h"#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifTPoint& TPoint::operator = (const TPoint& p){	fX = p.fX;	fY = p.fY;		return (*this);}TPoint& TPoint::operator = (const PoinT& point){	fX = point.x;	fY = point.y;	return (*this);}PoinT TPoint::GetPoinT (void) const{	PoinT point;	point.x = fX;	point.y = fY;	return (point);}void TPoint::SetPoint (const Coordinate x, const Coordinate y){	fX = x;	fY = y;}TPoint::TPoint (const Coordinate x, const Coordinate y)	: 	fX (x)	,	fY (y){}TPoint::TPoint (const TPoint& p)	:	fX (p.fX)	,	fY (p.fY){}TPoint::TPoint (const PoinT& point)	:	fX (point.x)	,	fY (point.y){}TPoint::~TPoint (void){}#if PRAGMA_MARK_SUPPORTED#pragma mark -#endifVRect TRect::GetVRect (void) const{	VRect vrect;	vrect.SetRect (((TRect*)this)->fRect); // JLT 010412 added cast	return (vrect);}bool TRect::IsPointInRect (const TPoint& pt) const { 	return (pt.GetX () >= fRect.left && pt.GetX () <= fRect.right && pt.GetY () >= fRect.top && pt.GetY () <= fRect.bottom); }void TRect::Inset (Coordinate dx, Coordinate dy){	fRect.left 		+= dx;	fRect.top 		+= dy;	fRect.right 	-= dx;	fRect.bottom 	-= dy;}void TRect::Offset (Coordinate dx, Coordinate dy){	fRect.left 		+= dx;	fRect.top 		+= dy;	fRect.right 	+= dx;	fRect.bottom 	+= dy;}TRect&	TRect::operator = (const Rect& rect){	::SetRect (&fRect, rect.left, rect.top, rect.right, rect.bottom);	return (*this);}TRect&	TRect::operator = (VRect& rect){	::SetRect (&fRect, rect.GetLeft (), rect.GetTop (), rect.GetRight (), rect.GetBottom ());	return (*this);}TRect::TRect (void){	::SetRect (&fRect, 0, 0, 0, 0);}TRect::TRect (const Coordinate left, const Coordinate top, const Coordinate right, const Coordinate bottom){	::SetRect (&fRect, left, top, right, bottom);}TRect::TRect (const Rect& rect){	::SetRect (&fRect, rect.left, rect.top, rect.right, rect.bottom);}TRect::TRect (const TRect& rect) {	::SetRect (&fRect, rect.GetLeft (), rect.GetTop (), rect.GetRight (), rect.GetBottom ());}TRect::TRect (VRect& rect) {	::SetRect (&fRect, rect.GetLeft (), rect.GetTop (), rect.GetRight (), rect.GetBottom ());}TRect::~TRect (void){}#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif