#ifndef _TTABSTRING_H#define _TTABSTRING_H#include "TObject.h"#include "TFlags.h"#include "TString.h"#include "TVArray.h"class TTabString : public TObject, protected TFlags{	public:		TTabString (const long int lineLength);			TTabString (const TTabString& tabString);			virtual ~TTabString (void) { };				virtual void						AddToken (const TString& token);				virtual void						AddToThis (const TString& string);		virtual void						AddToThis (const char* str);		virtual ClassType					Class (void) const { return (kTTabStringClass); };		virtual TObject*					Clone (void) const { return (new TTabString (*this)); };		virtual long int				IthTab (const unsigned int i) const;		virtual long int				IthTabLength (const unsigned int i) const;				virtual void						Copy (const TObject& obj);		virtual const TString&				GetString (void) const { return (fString); };    	virtual HashValue					Hash (void) const { return (fString.Hash ()); }			virtual bool						IsEqual (const TObject& obj) const { CHECK (Class () == obj.Class ()); return (fString.IsEqual (((const TTabString&)obj).fString)); };		virtual bool						IsNewLine (void) const { return ((bool)(!fCurTab)); };		virtual bool						IsNull (void) const { return (fString.IsNull ()); };			    virtual long int				LineLength (void) const { return (fLineLength); };			    virtual long int				Lines (void) const { return (fLines); };					    virtual TTabString&  				operator = (const TTabString&);				virtual void						SetNewLine (void);		virtual void						SetNull (void);		virtual void						SetTab (const long int tab);		virtual void						SetNextTabLength (const long int l) { SetTab (IthTab (Tabs ()) + l); };						virtual long int				Tabs (void) const { return ((long int)fTabs.GetItems ()); };				virtual ostream&					Write (ostream& o) const { return (fString.Write (o)); };							protected:				TString								fString;		TVArray<long int>				fTabs;		unsigned int							fCurTab;		long int						fLineLength;		long int						fLines;};#endif // _TTABSTRING_H