#ifndef _TWEIGHT_H#define _TWEIGHT_H#include "TClassTypes.h"#include "TSortable.h"#include "TChecks.h"class TWeight : public TSortable{	public:	    TWeight (const double w = kDefaultWeight) { fWeightValue = w; };	    TWeight (const TWeight& weight) {  fWeightValue = weight.fWeightValue; };	    	    virtual ~TWeight (void) { };		virtual ClassType			Class (void) const { return ((ClassType)kTObjectClass); };		virtual TObject*			Clone (void) const { return (new TWeight (*this)); };		virtual int					Compare (const TSortable& sortable) const;		virtual void				Copy (const TObject& obj) { CHECK (Class () == obj.Class ()); fWeightValue = ((const TWeight&)obj).fWeightValue; };    	virtual HashValue			Hash (void) const { return ((HashValue)fWeightValue); };		    	virtual bool 				IsEqual (const TObject& obj) const { CHECK (Class () == obj.Class ()); return ((bool)(fWeightValue == ((const TWeight&)obj).fWeightValue)); };		virtual TWeight&			operator = (const TWeight& weight);		virtual TWeight&			operator = (const double weight);		virtual TWeight&			operator += (const TWeight& weight);		virtual TWeight&			operator += (const double weight);		virtual TWeight&			operator -= (const TWeight& weight);		virtual TWeight&			operator -= (const double weight);					virtual double			GetWeight (void) const { return (fWeightValue); };		virtual void				SetWeight (const double weight = kDefaultWeight) { CHECK_ (kMinWeight <= weight && weight <= kMaxWeight); fWeightValue = weight; };				virtual ostream&			Write (ostream& o) const { return (o << fWeightValue); };		protected:		double					fWeightValue;};#endif // _TWEIGHT_H