#ifndef _TWRAPSTRING_H#define _TWRAPSTRING_H#include "TObject.h"#include "TFlags.h"#include "TString.h"#define TWRAPSTRING_FLAG_BREAKTOKENS 0x0001#define TWRAPSTRING_FLAG_SPACETOKENS 0x0002class TWrapString : public TObject, protected TFlags{	public:		TWrapString (const long int lineLength);			TWrapString (const TWrapString& wrapAroundString);			virtual ~TWrapString (void) { };				virtual void						AddToken (const TString& token);				virtual void 						AddToThis (const TString& string);		virtual void 						AddToThis (const char* str);		virtual void 						AddToThis (const char ch);		virtual ClassType					Class (void) const { return (kTWrapStringClass); }; 		virtual TObject*					Clone (void) const { return (new TWrapString (*this)); };		virtual void						Copy (const TObject& obj);		virtual const TString&				GetString (void) const { return (fString); };    	virtual HashValue					Hash (void) const { return (fString.Hash ()); }			virtual bool						IsBreakTokens (void) const { return (IsFlag (TWRAPSTRING_FLAG_BREAKTOKENS)); };		virtual bool						IsSpaceTokens (void) const { return (IsFlag (TWRAPSTRING_FLAG_SPACETOKENS)); };				virtual bool						IsEqual (const TObject& obj) const { CHECK (Class () == obj.Class ()); return (fString.IsEqual (((const TWrapString&)obj).fString)); };		virtual bool						IsNewLine (void) const { return ((bool)(!fCurCharacter)); };		virtual bool						IsNull (void) const { return (fString.IsNull ()); };			    virtual long int				LineLength (void) const { return (fLineLength); };			    virtual long int				Lines (void) const { return (fLines); };					    virtual TWrapString&  				operator = (const TWrapString&);				virtual void						SetBreakTokens (const bool breakTokens = true) { SetFlag (TWRAPSTRING_FLAG_BREAKTOKENS, breakTokens); };		virtual void						SetNewLine (void);		virtual void						SetNull (void);		virtual void						SetSpaceTokens (const bool spaceTokens = true) { SetFlag (TWRAPSTRING_FLAG_SPACETOKENS, spaceTokens); };		virtual ostream&					Write (ostream& o) const { return (fString.Write (o)); };							protected:		TString								fString;		long int						fCurCharacter;		long int						fLineLength;		long int						fLines;};#endif // _TWRAPAROUNDSTRING_H