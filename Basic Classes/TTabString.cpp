#include "TTabString.h"// consider this TTabString with two tab stops..// TTabString tabString (35);// tabString.SetTab (5);// tabString.SetTab (10);// tabString.SetTab (20);// tabString.Tabs () = 3;// tabString.IthTab (0) = 0;// tabString.IthTab (1) = 5;// tabString.IthTab (2) = 10;// tabString.IthTab (3) = 20;// tabString.IthTabLength (1) = 5;// tabString.IthTabLength (2) = 5;// tabString.IthTabLength (3) = 10;// tabString.IthTabLength (4) = 15;void TTabString::AddToken (const TString& token){//	CHECK_ (token.IsToken (" \t\n"));	long int l = IthTabLength (++fCurTab);	CHECK_ (l);			TString string (token);	string.SetLength (l - 1);	string.SetLength (l);		fString.AddToThis (string);	if (Tabs () < fCurTab)	{		fCurTab = 0;		++fLines;	}}// really should tokenise the input strings and treat as separate strings...		void TTabString::AddToThis (const TString& string){	CHECK_ (string.IsToken (" \t\n")); // change so tokenises	TString token = string;	AddToken (token);}void TTabString::AddToThis (const char* str){	CHECK_ (str);	TString string (str);	AddToThis (string);}		void TTabString::Copy (const TObject& obj){	CHECK_ (Class () == obj.Class ());	const TTabString& tabString = (const TTabString&)obj;	fString.Copy (tabString.fString);	fTabs = tabString.fTabs;	fCurTab = tabString.fCurTab;	fLineLength = tabString.fLineLength;	fLines = tabString.fLines;}long int TTabString::IthTab (const unsigned int i) const{	CHECK_ (i <= Tabs ());	if (i)		return (fTabs[i-1]);	return (0);}long int TTabString::IthTabLength (const unsigned int i) const{	CHECK_ (i && i <= Tabs () + 1);	return ((i == Tabs () + 1) ? (fLineLength - IthTab (i - 1)) : (IthTab (i) - IthTab (i - 1)));}				TTabString& TTabString::operator = (const TTabString& tabString){	fString = tabString.fString;		fTabs = tabString.fTabs;	fCurTab = tabString.fCurTab;	fLines = tabString.fLines;	fLineLength = tabString.fLineLength;			return (*this);}void TTabString::SetNewLine (void){	fString.AddToThis (EOLN);	++fLines;	fCurTab = 0;}		void TTabString::SetNull (void){	fString.SetNull ();	fCurTab = 0;	fLines = 0;}void TTabString::SetTab (const long int tab){	CHECK_ (IsNull ());	CHECK_ (IthTab (Tabs ()) < tab);	CHECK_ (tab < fLineLength);		fTabs.AddItem (tab);}TTabString::TTabString (const long int lineLength)	: fString (lineLength, lineLength)	, fTabs (0){	CHECK_ (lineLength);		fCurTab = 0;	fLines = 0;	fLineLength = lineLength;}TTabString::TTabString (const TTabString& tabString)	: fString (tabString.fString)	, fTabs (tabString.fTabs){	fCurTab = tabString.fCurTab;	fLines = tabString.fLines;	fLineLength = tabString.fLineLength;}