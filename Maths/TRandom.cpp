#include "TRandom.h"//// (c) 1993, Roderic D. M. Page//// Filename:		random.cpp//// Author:       	Rod Page//// Date:            23 July 1993//// Class:			Uniform//// Inheritance://// Purpose:		Encapsulate a uniform random number generator.//				A straight translation of CPWRAND.PAS//// Modifications://// 28/6/94 Compiled with BC++ 4.0// modified by Joseph L. Thorley#include <stdlib.h>#include <time.h>#include "TRandom.h"#define kP 2147483647#define kA      16807#define kB15    32768#define kB16    65536// Return 0 <= random number <= 1double TRandom::Random01 (void){	long IX, XALO, XHI, LEFTLO, FHI, K;	IX 	 	= fSeed;	XHI 	= IX / kB16;	XALO   	= (IX - XHI * kB16) * kA;	LEFTLO 	= XALO / kB16;	FHI 	= XHI * kA + LEFTLO;	K	  	= FHI / kB15;	IX 	 	= (((XALO - LEFTLO * kB16) - kP) + (FHI - K * kB15) * kB16) + K;	if (IX < 0) 		IX = IX + kP;	fSeed   = IX;	return ((double)IX / (double)kP);}// Return minvalue <= random number <= maxvaluelong TRandom::RandomInteger (const long minValue, const long maxValue){	return (minValue + ((maxValue - minValue + 1) * Random01 ()));}// Use C++ stdlib routines randomize and random to seed the generatorTRandom::TRandom (const Seed seed){	if (seed != 0) 		fSeed = seed;	else	{		time_t t;		srand ((unsigned)time (&t));		fSeed = (kP / RAND_MAX) * rand ();		if (fSeed == 0) 			++fSeed;	}}