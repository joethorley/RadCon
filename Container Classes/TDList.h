#ifndef __TDLIST_H#define __TDLIST_H#include "TReversibleContainer.h"#include "TChecks.h"#include "TCounter.h"#include "TMemMgr.h"class TDListIterator;class TDListIteratorConst;class TDListBlockInitializer{	protected:	    TDListBlockInitializer (void);	    ~TDListBlockInitializer (void);		    static TCounter							fCount;	};class TDList : public TReversibleContainer, private TDListBlockInitializer{	friend class TDListIterator;	friend class TDListIteratorConst;	friend class TDListBlockInitializer;	public:	    TDList (void);	    TDList (const TDList& list);	    virtual ~TDList (void);		virtual void							AddItem (const TObject& item) { AddItem (item, true); };		virtual void							AddItem (const TObject& item, const bool direction) { AddItem (item.Clone (), direction); };		virtual void							AddItem (TObject* item) { AddItem (item, true); };		virtual void							AddItem (TObject* item, const bool direction);		virtual void							AddItemAtCur (const TObject& item) { AddItemAtCur (item, true); };		virtual void							AddItemAtCur (const TObject& item, const bool direction) { AddItemAtCur (item.Clone (), direction); };		virtual void							AddItemAtCur (TObject* item) { AddItemAtCur (item, true); };		virtual void							AddItemAtCur (TObject* item, const bool direction) { addItem (item, fCurItem, direction); };		virtual ClassType 						Class (void) const { return ((ClassType)kTDListClass); };		virtual TObject*						Clone (void) const { return (new TDList (*this)); };		virtual void							Copy (const TObject& obj); 				virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (TObject*& item);		virtual bool							CurItem (const TObject*& item) const;	 	virtual void							DeleteItem (void) { DeleteItem (true); };	 	virtual void							DeleteItem (const bool direction);		virtual void							DeleteCurItem (void);	 	virtual void							DetachItem (TObject*& item) { DetachItem (item, true); };	 	virtual void							DetachItem (TObject*& item, const bool direction);	 	virtual void							DetachCurItem (TObject*& item) { detachItem (item, fCurItem); };		virtual bool							FirstItem (void) const;		virtual bool							FirstItem (TObject*& item);		virtual bool							FirstItem (const TObject*& item) const;	    virtual TContainerIterator& 			Iterator (void);		virtual TContainerIteratorConst&		IteratorConst (void) const;				virtual bool							LastItem (void) const;		virtual bool							LastItem (TObject*& item);		virtual bool							LastItem (const TObject*& item) const;		virtual bool							NextItem (void) const;		virtual bool							NextItem (TObject*& item);		virtual bool							NextItem (const TObject*& item) const;		virtual TDList& 						operator = (const TDList& list);				virtual bool							PrevItem (void) const;		virtual bool							PrevItem (TObject*& item);		virtual bool							PrevItem (const TObject*& item) const;	protected:  		class TDListElement		{		    friend class TDList;        	friend class TDListIterator;        	friend class TDListIteratorConst;			friend class TDListBlockInitializer;			public:		    	TDListElement (TObject*, TDListElement* = NULL, TDListElement* = NULL);			private:		      	void*									operator new (size_t);		       	void 									operator delete (void*);		    	TDListElement*							fNext;		    	TDListElement*							fPrev;		    	TObject*								fData;		    		static TMemBlocks*						fMgr;		};       		virtual void 							addItem (TObject* item, TDListElement* element, const bool direction); 		virtual void 							detachItem (TObject*& item, TDListElement* element);				TDListElement*							fHead;    	TDListElement*							fTail;    	TDListElement							fHeadEntry;    	TDListElement							fTailEntry;    	TDListElement*							fCurItem;};class TDListIterator : public TReversibleContainerIterator{	friend class TDList;    friend class TDListIteratorConst;  	public:	    TDListIterator (TDList& list);	    TDListIterator (const TDListIterator& iterator);	    	    virtual ~TDListIterator (void);	  		virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (TObject*& item) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (TObject*& item);		virtual bool 							IsReversible (void) const { return (true); };				virtual bool							LastItem (void);		virtual bool							LastItem (TObject*& item);				virtual bool							NextItem (void);		virtual bool							NextItem (TObject*& item);		virtual bool							PrevItem (void);		virtual bool							PrevItem (TObject*& item);					protected:		TDList&									fContainer;	    TDList::TDListElement*					fCurItem;};class TDListIteratorConst : public TReversibleContainerIteratorConst{	friend class TDList;	public:	    TDListIteratorConst (const TDList& list);	    TDListIteratorConst (const TDListIterator& iterator);	    TDListIteratorConst (const TDListIteratorConst& iteratorConst);	    virtual ~TDListIteratorConst (void);		virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (const TObject*& item) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (const TObject*& item);		virtual bool 							IsReversible (void) const { return (true); };		virtual bool							LastItem (void);		virtual bool							LastItem (const TObject*& item);				virtual bool							NextItem (void);		virtual bool							NextItem (const TObject*& item);				virtual bool							PrevItem (void);		virtual bool							PrevItem (const TObject*& item);	protected:		const TDList&							fContainer;	    const TDList::TDListElement*			fCurItem;};inlineTContainerIterator& TDList::Iterator (void){	return *((TContainerIterator*)(new TDListIterator (*this)));}inlineTContainerIteratorConst& TDList::IteratorConst (void) const{	return *((TContainerIteratorConst*)(new TDListIteratorConst (*this)));}#endif  // __TDLIST_H