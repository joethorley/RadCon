#ifndef _TSLIST_H#define _TSLIST_H#include "TContainer.h"#include "TChecks.h"#include "TMemMgr.h"#include "TCounter.h"class TSListIterator;class TSListIteratorConst;class TSListBlockInitializer{	protected:	    TSListBlockInitializer (void);	    ~TSListBlockInitializer (void);		    static TCounter							fCount;	};class TSList : public TContainer, private TSListBlockInitializer{	friend class TSListIterator;	friend class TSListIteratorConst;	friend class TSListBlockInitializer;	public:	    TSList (void);	    TSList (const TSList& list);	    virtual ~TSList (void);		virtual void							AddItem (const TObject& item) { AddItem (item.Clone ()); };		virtual void							AddItem (TObject* item);		virtual ClassType 						Class (void) const { return ((ClassType)(kTSListClass)); };		virtual TObject*						Clone (void) const { return (new TSList (*this)); };		virtual void							Copy (const TObject& obj); 				virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (TObject*& item);		virtual bool							CurItem (const TObject*& item) const;	 	virtual void							DetachItem (TObject*& item);		virtual bool							FirstItem (void) const;		virtual bool							FirstItem (TObject*& item);		virtual bool							FirstItem (const TObject*& item) const;	    virtual TContainerIterator& 			Iterator (void);		virtual TContainerIteratorConst&		IteratorConst (void) const;				virtual bool							NextItem (void) const;		virtual bool							NextItem (TObject*& item);		virtual bool							NextItem (const TObject*& item) const;		virtual TSList& 						operator = (const TSList& list);			protected:  		class TSListElement		{		    friend class TSList;        	friend class TSListIterator;        	friend class TSListIteratorConst;        	friend class TSListBlockInitializer;			public:		    	TSListElement (TObject* item, TSListElement* element = NULL);			private:		      	void*									operator new (size_t);		       	void 									operator delete (void*);		    	TSListElement*							fNext;		    	TObject*								fData;	           	            		    		static TMemBlocks*						fMgr;		};      				TSListElement*							fHead;    	TSListElement*							fTail;    	TSListElement							fHeadEntry;    	TSListElement							fTailEntry;    	TSListElement*							fCurItem;};class TSListIterator : public TContainerIterator{    friend class TSListIteratorConst;  	public:	    TSListIterator (TSList& list);	    TSListIterator (const TSListIterator& iterator);	    	    virtual ~TSListIterator (void);	  		virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (TObject*& item) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (TObject*& item);		virtual bool							NextItem (void);		virtual bool							NextItem (TObject*& item);					protected:		TSList&									fContainer;	    TSList::TSListElement*					fCurItem;};class TSListIteratorConst : public TContainerIteratorConst{	public:	    TSListIteratorConst (const TSList& list);	    TSListIteratorConst (const TSListIterator& iterator);	    TSListIteratorConst (const TSListIteratorConst& iteratorConst);	    virtual ~TSListIteratorConst (void);		virtual bool							CurItem (void) const { return ((bool)(fCurItem->fData != NULL)); };		virtual bool							CurItem (const TObject*& item) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (const TObject*& item);				virtual bool							NextItem (void);		virtual bool							NextItem (const TObject*& item);			protected:		const TSList&							fContainer;	    const TSList::TSListElement*			fCurItem;};inlineTContainerIterator& TSList::Iterator (void){	return *((TContainerIterator*)(new TSListIterator (*this)));}inlineTContainerIteratorConst& TSList::IteratorConst (void) const{	return *((TContainerIteratorConst*)(new TSListIteratorConst (*this)));}#endif  // _TSLIST_H