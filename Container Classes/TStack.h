#ifndef _TSTACK_H#define _TSTACK_H#include "TContainer.h"#include "TChecks.h"#include "TSList.h"// need to define iterators.....tommorow// also define BSTree and HashTableclass TStackIterator;class TStackIteratorConst;class TStack : public TContainer{	friend class TStackIterator;	friend class TStackIteratorConst;	public:	    TStack (void);	    TStack (const TStack&);	    virtual ~TStack (void);		virtual void							AddItem (const TObject& item);		virtual void							AddItem (TObject*);		virtual ClassType 						Class (void) const;		virtual TObject*						Clone (void) const; 		virtual void							Copy (const TObject& stack); 				virtual bool							CurItem (void) const;		virtual bool							CurItem (TObject*&);		virtual bool							CurItem (const TObject*&) const;	 	virtual void							DetachItem (TObject*&);		virtual bool							FirstItem (void) const;		virtual bool							FirstItem (TObject*&);		virtual bool							FirstItem (const TObject*&) const;		virtual unsigned int						GetItems (void) const;	    virtual TContainerIterator& 			Iterator (void);		virtual TContainerIteratorConst&		IteratorConst (void) const;				virtual bool							NextItem (void) const;		virtual bool							NextItem (TObject*&);		virtual bool							NextItem (const TObject*&) const;		virtual TStack& 						operator = (const TStack&);		virtual void 							Pop (void);		virtual void 							Pop (TObject*&);		virtual void 							Push (const TObject&);		virtual void 							Push (TObject*);				virtual void 							Top (TObject*&);				virtual void 							Top (const TObject*&) const;			protected:  		TSList									fSList;};class TStackIterator : public TContainerIterator{    friend class TStackIteratorConst;  	public:	    TStackIterator (TStack&);	    TStackIterator (const TStackIterator&);	    	    virtual ~TStackIterator (void);	  		virtual bool							CurItem (void) const;		virtual bool							CurItem (TObject*&) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (TObject*&);		virtual bool							NextItem (void);		virtual bool							NextItem (TObject*&);	protected:		TSListIterator							fSListIterator;};class TStackIteratorConst : public TContainerIteratorConst {	public:	    TStackIteratorConst (const TStack&);	    TStackIteratorConst (const TStackIterator&);	    TStackIteratorConst (const TStackIteratorConst&);	    virtual ~TStackIteratorConst (void);		virtual bool							CurItem (void) const;		virtual bool							CurItem (const TObject*&) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (const TObject*&);				virtual bool							NextItem (void);		virtual bool							NextItem (const TObject*&);	protected:		TSListIteratorConst						fSListIteratorConst;};inlinevoid TStack::AddItem (const TObject& item){	fSList.AddItem (item);}inlinevoid TStack::AddItem (TObject* item){	fSList.AddItem (item);}inlineClassType TStack::Class (void) const{	return ((ClassType)(kTStackClass));}inlineTObject* TStack::Clone (void) const{	return (new TStack (*this));}inlinevoid TStack::Copy (const TObject& stack){	CHECK (Class () == stack.Class ());	fSList.Copy (((const TStack&)stack).fSList);}inlinebool TStack::CurItem (void) const{	return (fSList.CurItem ());}inlinebool TStack::CurItem (TObject*& item){	return (fSList.CurItem (item));}inlinebool TStack::CurItem (const TObject*& item) const{	return (fSList.CurItem (item));}inlinevoid TStack::DetachItem (TObject*& item){	fSList.DetachItem (item);}inlinebool TStack::FirstItem (void) const{	return (fSList.FirstItem ());}inlinebool TStack::FirstItem (TObject*& item){	return (fSList.FirstItem (item));}inlinebool TStack::FirstItem (const TObject*& item) const{	return (fSList.FirstItem (item));}inlineunsigned int TStack::GetItems (void) const{	return (fSList.GetItems ());}inlineTContainerIterator& TStack::Iterator (void){	return *((TContainerIterator*)(new TStackIterator (*this)));}inlineTContainerIteratorConst& TStack::IteratorConst (void) const{	return *((TContainerIteratorConst*)(new TStackIteratorConst (*this)));}inlinebool TStack::NextItem (void) const{	return (fSList.NextItem ());}inlinebool TStack::NextItem (TObject*& item){	return (fSList.NextItem (item));}inlinebool TStack::NextItem (const TObject*& item) const{	return (fSList.NextItem (item));}inlinevoid TStack::Pop (void){	fSList.DeleteItem ();}inlinevoid TStack::Pop (TObject*& item){	fSList.DetachItem (item);}inlinevoid TStack::Push (const TObject& item){	fSList.AddItem (item);}inlinevoid TStack::Push (TObject* item){	fSList.AddItem (item);}inline		void TStack::Top (TObject*& item){	fSList.FirstItem (item);}	inlinevoid TStack::Top (const TObject*& item) const{	fSList.FirstItem (item);}inline     TStack::TStack (void)	:	fSList (){}     inlineTStack::TStack (const TStack& stack)	:	fSList (stack.fSList){}inlineTStack::~TStack (void){       }     inlinebool TStackIterator::CurItem (void) const{	return (fSListIterator.CurItem ());}inlinebool TStackIterator::CurItem (TObject*& item) const{	return (fSListIterator.CurItem (item));}inlinebool TStackIterator::FirstItem (void){	return (fSListIterator.FirstItem ());}inlinebool TStackIterator::FirstItem (TObject*& item){	return (fSListIterator.FirstItem (item));}inlinebool TStackIterator::NextItem (void){	return (fSListIterator.NextItem ());}inlinebool TStackIterator::NextItem (TObject*& item){	return (fSListIterator.NextItem (item));}inlineTStackIterator::TStackIterator (TStack& stack)	: fSListIterator (stack.fSList){}inlineTStackIterator::TStackIterator (const TStackIterator& iterator)	: fSListIterator (iterator.fSListIterator){}inlineTStackIterator::~TStackIterator (void){}inlinebool TStackIteratorConst::CurItem (void) const{	return (fSListIteratorConst.CurItem ());}inlinebool TStackIteratorConst::CurItem (const TObject*& item) const{	return (fSListIteratorConst.CurItem (item));}inlinebool TStackIteratorConst::FirstItem (void){	return (fSListIteratorConst.FirstItem ());}inlinebool TStackIteratorConst::FirstItem (const TObject*& item){	return (fSListIteratorConst.FirstItem (item));}inlinebool TStackIteratorConst::NextItem (void){	return (fSListIteratorConst.NextItem ());}inlinebool TStackIteratorConst::NextItem (const TObject*& item){	return (fSListIteratorConst.NextItem (item));}#endif  // _TSTACK_H