#ifndef __TBTREE_H#define __TBTREE_H#include "TContainer.h"#include "TChecks.h"#include "TMemMgr.h"#include "TCounter.h"class TBTreeIterator;class TBTreeIteratorConst;#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TBTreeBlockInitializer ___#endifclass TBTreeBlockInitializer{	protected:	    TBTreeBlockInitializer (void);	    ~TBTreeBlockInitializer (void);		    static TCounter							fCount;	};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TBTree ___#endifclass TBTree : public TContainer, private TBTreeBlockInitializer{	friend class TBTreeIterator;	friend class TBTreeIteratorConst;	friend class TBTreeBlockInitializer;	public:	    TBTree (void);	    TBTree (const TBTree& bTree);	    virtual ~TBTree (void);		virtual void							AddItem (const TObject& obj) { AddItem (obj.Clone ()); };		virtual void							AddItem (TObject* obj);		virtual ClassType 						Class (void) const { return (kTBTreeClass); };		virtual TObject*						Clone (void) const { return (new TBTree (*this)); };		virtual void							Copy (const TObject& obj); 				virtual bool							CurItem (void) const { return (fCurItem); };		virtual bool							CurItem (TObject*& obj);		virtual bool							CurItem (const TObject*& obj) const; 		virtual void							DeleteAll (void);		virtual void							DeleteCurItem (void); 		virtual void							DeleteItem (void) { FirstItem (); DeleteCurItem (); }; 		virtual void							DeleteItem (const TObject& toDelete);			virtual void							DetachCurItem (TObject*& item) { detachItem (item, fCurItem); };	 	virtual void							DetachItem (const TObject& toDetach, TObject*& item);	 	virtual void							DetachItem (TObject*& item) { detachItem (item, rightMost (fRoot)); };		virtual bool 							FindItem (const TObject& toFind) const { return (search (fRoot, toFind)); };		virtual bool 							FindItem (const TObject& toFind, TObject*& item) { return (search (fRoot, toFind, item)); };		virtual bool 							FindItem (const TObject& toFind, const TObject*& item) const { return (search (fRoot, toFind, item)); };		virtual bool							FirstItem (void) const;		virtual bool							FirstItem (TObject*& obj);		virtual bool							FirstItem (const TObject*& obj) const;	    virtual TContainerIterator& 			Iterator (void);		virtual TContainerIteratorConst&		IteratorConst (void) const;		virtual bool							LastItem (void) const;		virtual bool							LastItem (TObject*& obj);		virtual bool							LastItem (const TObject*& obj) const;				virtual bool							NextItem (void) const;		virtual bool							NextItem (TObject*& obj);		virtual bool							NextItem (const TObject*& obj) const;		virtual TBTree& 						operator = (const TBTree& bTree);		virtual bool							PrevItem (void) const;		virtual bool							PrevItem (TObject*& obj);		virtual bool							PrevItem (const TObject*& obj) const;			protected:  				class TBTreeElement		{		    friend class TBTree;        	friend class TBTreeIterator;        	friend class TBTreeIteratorConst;        	friend class TBTreeBlockInitializer;			public:		    	TBTreeElement (TObject* obj, TBTreeElement* parent = NULL);			private:		      	void*									operator new (size_t);		       	void 									operator delete (void*);		  		TBTreeElement*							fParent;		  		TBTreeElement*							fLeftChild;		  		TBTreeElement*							fRightChild;		    	TObject*								fData;	           	            		    		static TMemBlocks*						fMgr;		};		void 									deleteTraverse (TBTreeElement* node);		void 									detachItem (TObject*& item, TBTreeElement* node);				virtual TBTreeElement*					leftMost (TBTreeElement*);		virtual TBTreeElement* 					nextItem (TBTreeElement*);		virtual TBTreeElement*					rightMost (TBTreeElement*);		virtual TBTreeElement*					prevItem (TBTreeElement*);		virtual bool 							search (const TBTreeElement* node, const TObject& toFind) const;		virtual bool 							search (const TBTreeElement* node, const TObject& toFind, TObject*& item);		virtual bool 							search (const TBTreeElement* node, const TObject& toFind, TBTreeElement*& element);		virtual bool 							search (const TBTreeElement* node, const TObject& toFind, const TObject*& item) const;    	TBTreeElement*							fRoot;    	TBTreeElement*							fCurItem;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TBTreeIterator ___#endifclass TBTreeIterator : public TContainerIterator{    friend class TBTreeIteratorConst;  	public:	    TBTreeIterator (TBTree&);	    TBTreeIterator (const TBTreeIterator&);	    	    ~TBTreeIterator (void);	  		virtual bool							CurItem (void) const { return (fCurItem); };		virtual bool							CurItem (TObject*&) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (TObject*&);		virtual bool							LastItem (void);		virtual bool							LastItem (TObject*&);		virtual bool							NextItem (void);		virtual bool							NextItem (TObject*&);		virtual bool							PrevItem (void);		virtual bool							PrevItem (TObject*&);					protected:		TBTree&									fContainer;	    TBTree::TBTreeElement*					fCurItem;};#if PRAGMA_MARK_SUPPORTED#pragma mark -#pragma mark ___ class TBTreeIteratorConst ___#endifclass TBTreeIteratorConst : public TContainerIteratorConst{	public:	    TBTreeIteratorConst (const TBTree&);	    TBTreeIteratorConst (const TBTreeIterator&);	    TBTreeIteratorConst (const TBTreeIteratorConst&);	    ~TBTreeIteratorConst (void);		virtual bool							CurItem (void) const { return (fCurItem);};		virtual bool							CurItem (const TObject*&) const;		virtual bool							FirstItem (void);		virtual bool							FirstItem (const TObject*&);		virtual bool							LastItem (void);		virtual bool							LastItem (const TObject*&);						virtual bool							NextItem (void);		virtual bool							NextItem (const TObject*&);				virtual bool							PrevItem (void);		virtual bool							PrevItem (const TObject*&);			protected:		const TBTree&							fContainer;	    TBTree::TBTreeElement*					fCurItem;};inlineTContainerIterator& TBTree::Iterator (void) { 	return *((TContainerIterator*)(new TBTreeIterator (*this))); };inlineTContainerIteratorConst& TBTree::IteratorConst (void) const {	return *((TContainerIteratorConst*)(new TBTreeIteratorConst (*this))); };#if PRAGMA_MARK_SUPPORTED#pragma mark -#endif#endif  // __TBTREE_H