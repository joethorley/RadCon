#ifndef __TCONTAINER_H#define __TCONTAINER_H#include "TChecks.h"#include "TObject.h"#include "TCounter.h"#include "TItemNumber.h"class TContainerIterator;class TContainerIteratorConst;class TContainer : public TObject{		friend class TContainerIterator;	friend class TContainerIteratorConst;		public :		TContainer (void);		TContainer (const TContainer& container);		virtual ~TContainer (void);		virtual void							AddItem (const TObject& item) = 0;		virtual void							AddItem (TObject*) = 0;		virtual ClassType						Class (void) const { return ((ClassType)(kTContainerClass)); };		virtual TObject*						Clone (void) const = 0; 		virtual void							Copy (const TObject&) = 0;				virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (TObject*& item) = 0;		virtual bool							CurItem (const TObject*& item) const = 0; 		virtual void							DeleteAll (void);	 	virtual void							DeleteItem (void); 		virtual void							DetachItem (TObject*& item) = 0;		virtual bool							FirstItem (void) const = 0;		virtual bool							FirstItem (TObject*& item) = 0;		virtual bool							FirstItem (const TObject*& item) const = 0;		virtual bool							FindItem (const TObject& toFind) const;		virtual bool							FindItem (const TObject& toFind, TObject*& item);		virtual bool							FindItem (const TObject& toFind, const TObject*& item) const;    	virtual void 							ForEach (IterFuncType actionPtr, void* paramListPtr);		virtual HashValue 						Hash (void) const;		virtual bool							IsEmpty (void) const { return ((bool)(GetItems () == 0)); };		virtual bool							IsEqual (const TObject& container) const;		virtual bool							IsReversible (void) const { return (false); };	    virtual bool				 			GetIthItem (const unsigned int i) const { return (0 < i && i<= GetItems ()); };	    virtual bool							GetIthItem (const unsigned int i, TObject*& item);	    virtual bool							GetIthItem (const unsigned int i, const TObject*& item) const;	    	    virtual TContainerIterator& 			Iterator (void) = 0;		virtual TContainerIteratorConst&		IteratorConst (void) const = 0;		virtual unsigned int						GetItems (void) const { return ((unsigned int)(fItems.GetCount ())); };		virtual bool							NextItem (void) const = 0;		virtual bool							NextItem (TObject*& item) = 0;		virtual bool							NextItem (const TObject*& item) const = 0;				virtual ostream&						Write (ostream& o) const;	protected :				TCounter								fItems;};class TContainerIterator{	public:	  		virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (TObject*& item) const = 0;		virtual bool							FirstItem (void) = 0;		virtual bool							FirstItem (TObject*& item) = 0;		virtual bool							IsReversible (void) const { return (false); };				virtual bool							NextItem (void) = 0;		virtual bool							NextItem (TObject*& item) = 0;};class TContainerIteratorConst{	public:	  		virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (const TObject*& item) const = 0;		virtual bool							FirstItem (void) = 0;		virtual bool							FirstItem (const TObject*& item) = 0;		virtual bool							IsReversible (void) const { return (false); };				virtual bool							NextItem (void) = 0;		virtual bool							NextItem (const TObject*& item) = 0;};#endif // __TCONTAINER_H