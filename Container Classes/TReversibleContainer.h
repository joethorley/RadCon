#ifndef __TREVERSIBLECONTAINER_H#define __TREVERSIBLECONTAINER_H#include "TContainer.h"class TReversibleContainerIterator;class TReversibleContainerIteratorConst;class TReversibleContainer : public TContainer{		friend class TReversibleContainerIterator;	friend class TReversibleContainerIteratorConst;		public :		TReversibleContainer (void) : TContainer () { };		TReversibleContainer (const TReversibleContainer& reversibleContainer) : TContainer (reversibleContainer) { };		virtual ~TReversibleContainer (void) { };				virtual void							AddItem (const TObject&) = 0;		virtual void							AddItem (TObject*) = 0;		virtual ClassType						Class (void) const { return (kTReversibleContainerClass); };		virtual TObject*						Clone (void) const = 0;		virtual void							Copy (const TObject&) = 0; 				virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (TObject*&) = 0;		virtual bool							CurItem (const TObject*&) const = 0; 		virtual void							DetachItem (TObject*&) = 0;		virtual bool							FirstItem (void) const = 0;		virtual bool							FirstItem (TObject*&) = 0;		virtual bool							FirstItem (const TObject*&) const = 0;		virtual bool							IsReversible (void) const { return (true); };	    virtual TContainerIterator& 			Iterator (void) = 0;		virtual TContainerIteratorConst&		IteratorConst (void) const = 0;		virtual bool							LastItem (void) const = 0;		virtual bool							LastItem (TObject*&) = 0;		virtual bool							LastItem (const TObject*&) const = 0;		virtual bool							NextItem (void) const = 0;		virtual bool							NextItem (TObject*&) = 0;		virtual bool							NextItem (const TObject*&) const = 0;		virtual bool							PrevItem (void) const = 0;		virtual bool							PrevItem (TObject*&) = 0;		virtual bool							PrevItem (const TObject*&) const = 0;};class TReversibleContainerIterator : public TContainerIterator{	public:	  		virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (TObject*& item) const = 0;		virtual bool							FirstItem (void) = 0;		virtual bool							FirstItem (TObject*& item) = 0;		virtual bool							IsReversible (void) const { return (true); };		virtual bool							LastItem (void) = 0;		virtual bool							LastItem (TObject*& item) = 0;				virtual bool							NextItem (void) = 0;		virtual bool							NextItem (TObject*& item) = 0;		virtual bool							PrevItem (void) = 0;		virtual bool							PrevItem (TObject*& item) = 0;};class TReversibleContainerIteratorConst : public TContainerIteratorConst{	public:	  		virtual bool							CurItem (void) const = 0;		virtual bool							CurItem (const TObject*& item) const = 0;		virtual bool							FirstItem (void) = 0;		virtual bool							FirstItem (const TObject*& item) = 0;		virtual bool							IsReversible (void) const { return (true); };		virtual bool							LastItem (void) = 0;		virtual bool							LastItem (const TObject*& item) = 0;				virtual bool							NextItem (void) = 0;		virtual bool							NextItem (const TObject*& item) = 0;		virtual bool							PrevItem (void) = 0;		virtual bool							PrevItem (const TObject*& item) = 0;};#endif // __TREVERSIBLECONTAINER_H