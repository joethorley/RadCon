#ifndef _TARRYCONTAINER_H#define _TARRYCONTAINER_H#include "TReversibleContainer.h"class TArryContainerIterator;class TArryContainerIteratorConst;class TArryContainer : public TReversibleContainer{	friend class TArryContainerIterator;	friend class TArryContainerIteratorConst;		public:		TArryContainer (void) { fCurItem = 1; };				virtual void							AddItem (const TObject&) = 0;		virtual void							AddItem (TObject*) = 0;		virtual ClassType						Class (void) const { return ((ClassType)(kTArryContainerClass)); };		virtual TObject*						Clone (void) const = 0; 		virtual void							Copy (const TObject&) = 0; 				virtual bool							CurItem (void) const { return (IthItem (fCurItem)); };		virtual bool							CurItem (TObject*& item) { return (IthItem (fCurItem, item)); };		virtual bool							CurItem (const TObject*& item) const { return (IthItem (fCurItem, item)); }; 		virtual void							DetachItem (TObject*&) = 0;		virtual bool							FirstItem (void) const { return (IthItem (((TArryContainer*)this)->fCurItem = 1)); };		virtual bool							FirstItem (TObject*& item) { return (IthItem (fCurItem = 1, item)); };		virtual bool							FirstItem (const TObject*& item) const { return (IthItem (((TArryContainer*)this)->fCurItem = 1, item)); };		virtual bool							IthItem (const unsigned int) const = 0;		virtual bool							IthItem (const unsigned int, TObject*&) = 0;		virtual bool							IthItem (const unsigned int, const TObject*&) const = 0;		virtual TObject&						IthItemRef (const unsigned int) = 0;				virtual const TObject&					IthItemRef (const unsigned int) const = 0;	    virtual TContainerIterator& 			Iterator (void) = 0;		virtual TContainerIteratorConst&		IteratorConst (void) const = 0;		virtual bool							LastItem (void) const { return (IthItem (((TArryContainer*)this)->fCurItem = GetItems ())); };		virtual bool							LastItem (TObject*& item) { return (IthItem (fCurItem = GetItems (), item)); };		virtual bool							LastItem (const TObject*& item) const { return (IthItem (((TArryContainer*)this)->fCurItem = GetItems (), item)); };		virtual bool							NextItem (void) const { return (CurItem () ? IthItem (((TArryContainer*)this)->fCurItem += 1) : false); };		virtual bool							NextItem (TObject*& item) { return (CurItem () ? IthItem (fCurItem += 1, item) : false); };		virtual bool							NextItem (const TObject*& item) const { return (CurItem () ? IthItem (((TArryContainer*)this)->fCurItem += 1, item) : false); };        virtual TObject&						operator [] (const unsigned int i) { return (IthItemRef (i+1)); }; 		virtual const TObject&					operator [] (const unsigned int i) const { return (IthItemRef (i+1)); };		virtual bool							PrevItem (void) const { return (CurItem () ? IthItem (((TArryContainer*)this)->fCurItem -= 1) : false); };		virtual bool							PrevItem (TObject*& item) { return (CurItem () ? IthItem (fCurItem -= 1, item) : false); };		virtual bool							PrevItem (const TObject*& item) const { return (CurItem () ? IthItem (((TArryContainer*)this)->fCurItem -= 1, item) : false); };				protected:		unsigned int								fCurItem;};class TArryContainerIterator : public TReversibleContainerIterator{	friend class TArryContainerIteratorConst;	public:	 		TArryContainerIterator (TArryContainer& arryContainer) { fCurItem = arryContainer.fCurItem; };		TArryContainerIterator (const TArryContainerIterator& arryContainerIterator) { fCurItem = arryContainerIterator.fCurItem; };						virtual bool							CurItem (void) const { return (IthItem (fCurItem)); };		virtual bool							CurItem (TObject*& item) const { return (IthItem (fCurItem, item)); };		virtual bool							FirstItem (void) { return (IthItem (fCurItem = 1)); };		virtual bool							FirstItem (TObject*& item) { return (IthItem (fCurItem = 1, item)); };		virtual bool							IthItem (const unsigned int) const = 0;		virtual bool							IthItem (const unsigned int, TObject*& item) const = 0;		virtual TObject&						IthItemRef (const unsigned int) const = 0;		virtual bool							LastItem (void) = 0;		virtual bool							LastItem (TObject*& item) = 0;				virtual bool							NextItem (void) { return (CurItem () ? IthItem (++fCurItem) : false); };		virtual bool							NextItem (TObject*& item) { return (CurItem () ? IthItem (++fCurItem, item) : false); };        virtual TObject&						operator [] (const unsigned int i) const { return (IthItemRef (i+1)); }; 		virtual bool							PrevItem (void) { return (CurItem () ? IthItem (--fCurItem) : false); };		virtual bool							PrevItem (TObject*& item) { return (CurItem () ? IthItem (--fCurItem, item) : false); };	protected:		unsigned int								fCurItem;};class TArryContainerIteratorConst : public TReversibleContainerIteratorConst{	public:	  		TArryContainerIteratorConst (const TArryContainer& arryContainer) { fCurItem = arryContainer.fCurItem; };		TArryContainerIteratorConst (const TArryContainerIterator& arryContainerIterator) { fCurItem = arryContainerIterator.fCurItem; };		TArryContainerIteratorConst (const TArryContainerIteratorConst& arryContainerIterator) { fCurItem = arryContainerIterator.fCurItem; };		virtual bool							CurItem (void) const { return (IthItem (fCurItem)); };		virtual bool							CurItem (const TObject*& item) const { return (IthItem (fCurItem, item)); };		virtual bool							FirstItem (void) { return (IthItem (fCurItem = 1)); };		virtual bool							FirstItem (const TObject*& item) { return (IthItem (fCurItem = 1, item)); };		virtual bool							IthItem (const unsigned int) const = 0;		virtual bool							IthItem (const unsigned int, const TObject*& item) const = 0;		virtual const TObject&					IthItemRef (const unsigned int) const = 0;		virtual bool							LastItem (void) = 0;		virtual bool							LastItem (const TObject*& item) = 0;				virtual bool							NextItem (void) { return (CurItem () ? IthItem (++fCurItem) : false); };		virtual bool							NextItem (const TObject*& item) { return (CurItem () ? IthItem (++fCurItem, item) : false); };		virtual const TObject&					operator [] (const unsigned int i) const { return (IthItemRef (i+1)); };		virtual bool							PrevItem (void) { return (CurItem () ? IthItem (--fCurItem) : false); };		virtual bool							PrevItem (const TObject*& item) { return (CurItem () ? IthItem (--fCurItem, item) : false); };	protected:		unsigned int								fCurItem;};#endif // _TARRYCONTAINER_H