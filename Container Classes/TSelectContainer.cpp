#include "TSelectContainer.h"void TSelectContainer::Copy (const TObject& obj){	CHECK (Class () == obj.Class ());	const TSelectContainer& selectContainer = (const TSelectContainer&) obj;	fItemSet = selectContainer.fItemSet;}void TSelectContainer::DeleteAll (const bool selected){	while (!IsEmpty (selected))		DeleteItem (selected);}void TSelectContainer::DeleteItem (const bool selected){	TObject* item = NULL;	DetachItem (item, selected);	delete item;}unsigned int TSelectContainer::IthSelection (const unsigned int i, const bool selected) const{	if (0 < i && i <= (GetItems (selected)))	{		if (selected)			return (fItemSet.IthItem (i));		return (i);	}	return (0);}		ostream& TSelectContainer::Write (ostream& o, const bool selected) const{	for (unsigned int i = 0; i < GetItems (selected); ++i)		o << IthItemRef (i+1, selected) << EOLN;	return (o);}