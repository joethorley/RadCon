#ifndef _TITEMSET_H#define _TITEMSET_H#include "TClassTypes.h"#include "TSortable.h"#include "TBitSet.h"class TItemSet : public TSortable{	public:				TItemSet (TString name = "") : fBitSet (), fName (name) { };		TItemSet (const unsigned int i, TString name = "") : fBitSet (i), fName (name) { };		TItemSet (const TItemSet& itemSet) : fBitSet (itemSet.fBitSet), fName (itemSet.fName) { };		virtual ~TItemSet (void) { };		virtual void 						AddToThis (const TItemSet& itemSet) { fBitSet.AddToThis (itemSet.fBitSet); };		virtual void 						AddToThis (const unsigned int n) { fBitSet.AddToThis (n); };				virtual ClassType					Class (void) const { return (kTItemSetClass); }; 		virtual TObject*					Clone (void) const { return (new TItemSet (*this)); };		virtual int 						Compare (const TSortable& obj) const;		virtual void						Copy (const TObject& obj);		virtual unsigned int					CurItem (void) const { return ((unsigned int)(fBitSet.CurElement ())); };					virtual void 						SubtractFromThis (const TItemSet& itemSet) { fBitSet.SubtractFromThis (itemSet.fBitSet); };		virtual void 						SubtractFromThis (const unsigned int n) { fBitSet.SubtractFromThis (n); };		virtual void 						SetEmpty (void) { fBitSet.SetEmpty (); };		virtual unsigned int  				FirstItem (void) const { return ((unsigned int)(fBitSet.FirstElement ())); };		virtual void 						SetFull (const unsigned int n = kMaxLeaves) { fBitSet.SetFull (n); };    	virtual HashValue					Hash (void) const { return (fBitSet.Hash ()); };		virtual void 						Intersection (const TItemSet& itemSet, TItemSet& intersection) const { fBitSet.Intersection (itemSet.fBitSet, intersection.fBitSet); };				virtual void						IntersectWithThis (const TItemSet& itemSet) { fBitSet.IntersectWithThis (itemSet.fBitSet); };		virtual void						IntersectWithThis (const unsigned int item) { fBitSet.IntersectWithThis (item); };		virtual bool 						IsSequential (void) const { return (fBitSet.IsSequential ()); };		virtual bool 						IsDisjoint (const TItemSet& itemSet) const { return (fBitSet.IsDisjoint (itemSet.fBitSet)); };		virtual bool						IsEmpty (void) const { return (fBitSet.IsEmpty ()); };		virtual bool						IsEqual (const TObject&) const;		virtual bool						IsItem (const unsigned int n) const { return (fBitSet.IsElement ((unsigned int) n)); };		virtual bool						IsSubset (const TItemSet& itemSet) const { return (fBitSet.IsSubset (itemSet.fBitSet)); };		virtual bool						IsSuperset (const TItemSet& itemSet) const { return (fBitSet.IsSuperset (itemSet.fBitSet)); }; 		virtual unsigned int  				IthItem (const unsigned int n) const { return (fBitSet.IthElement ((unsigned int) n)); };		virtual unsigned int					LastItem (void) const { return ((unsigned int)(fBitSet.LastElement ())); };		virtual unsigned int					NumberOfItem (const unsigned int n) const { return (fBitSet.NumberOfElement (n)); };		virtual unsigned int					GetItems (void) const { return ((unsigned int)(fBitSet.GetSize ())); }		virtual unsigned int  				NextItem (void) const { return ((unsigned int)(fBitSet.NextElement ())); };		virtual unsigned int  				NextItem (unsigned int n) const { return ((unsigned int)(fBitSet.NextElement ((unsigned int) n))); };		virtual TItemSet& 					operator = (const TItemSet& itemSet);		virtual TItemSet& 					operator += (const TItemSet& itemSet);		virtual TItemSet& 					operator += (const unsigned int item);		virtual TItemSet& 					operator *= (const TItemSet& itemSet);		virtual TItemSet& 					operator *= (const unsigned int item);		virtual TItemSet& 					operator -= (const TItemSet& itemSet);		virtual TItemSet& 					operator -= (const unsigned int item);						virtual TItemSet					operator + (const TItemSet& itemSet) const;							virtual TItemSet					operator * (const TItemSet& itemSet) const;							virtual TItemSet					operator - (const TItemSet& itemSet) const;							virtual void 						SetDifference (const TItemSet& itemSet, TItemSet& setDifference) const { fBitSet.SetDifference (itemSet.fBitSet, setDifference.fBitSet); };		virtual void 						Union (const TItemSet& itemSet, TItemSet& uniun) const { fBitSet.Union (itemSet.fBitSet, uniun.fBitSet); };		virtual unsigned int  				PrevItem (void) const { return ((unsigned int)(fBitSet.PrevElement ())); };		virtual unsigned int  				PrevItem (unsigned int n) const { return ((unsigned int)(fBitSet.PrevElement ((unsigned int)n))); };		virtual ostream& 					Write (ostream& o) const { return (fBitSet.Write (o)); };	protected:		TBitSet<kMaxItems>					fBitSet;		TString								fName;					};#endif  // _TITEMSET_H