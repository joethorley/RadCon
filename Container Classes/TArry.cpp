#include "TArry.h"void TArry::AddItem (TObject* item){	fVArray[GetItems ()] = item;	fItems.Incr ();}void TArry::Copy (const TObject& obj){	const TArry& array = (const TArry&) obj;	fItems.Copy (array.fItems);	fVArray = array.fVArray; // will not retain delta etc}void TArry::DeleteIthItem (const unsigned int i){	TObject* item = NULL;	DetachIthItem (i,item);	delete item;}void TArry::DetachIthItem (const unsigned int i, TObject*& item){	if (IthItem (i))	{		if (i < fCurItem)			--fCurItem;					item = fVArray[i-1];				unsigned int c = i-1;		while (IthItem (++c))			fVArray[c-1] = fVArray[c];		fVArray[c-1] = NULL;						fItems.Decr ();		if (fVArray.Delta () < (fVArray.Size () - GetItems ()))			fVArray.ReSize (GetItems ());	}}bool TArry::IthItem (const unsigned int i, TObject*& item){	if (IthItem (i))	{		item = fVArray[i-1];			return (true);	}	return (false);}bool TArry::IthItem (const unsigned int i, const TObject*& item) const{	if (IthItem (i))	{		item = fVArray[i-1];			return (true);	}	return (false);}TArry& TArry::operator = (const TArry& arry){	fItems = arry.fItems;	fVArray = arry.fVArray; // will not retain delta etc	return (*this);}