#include "TDListSort.h"void TDListSort::AddItem (TObject* item, const bool direction){	CHECK_ (item->IsSortable ());	SetFlag (TDLISTSORT_FLAG_SORTED, false);	TDList::AddItem (item, direction);}void TDListSort::AddItemSort (TObject* item){	CHECK_ (item->IsSortable () && IsSorted ());	if (IsEmpty ())		TDList::AddItem (item, true);	else	{		const TObject* curItem;		((const TDListSort*)this)->LastItem (curItem);		if (*((const TSortable*)curItem) < *((const TSortable*)item))			TDList::AddItemAtCur (item, true);		else		{			for (FirstItem (); ((const TDListSort*)this)->CurItem (curItem); NextItem ())				if (*((const TSortable*)item) < *((const TSortable*)curItem))					break;								CHECK_ (CurItem ());			TDList::AddItemAtCur (item, false);		}	}	}void TDListSort::AddItemAtCur (TObject* item, const bool direction){	CHECK_ (item->IsSortable ());	SetFlag (TDLISTSORT_FLAG_SORTED, false);	TDList::AddItemAtCur (item, direction);}void TDListSort::Copy (const TObject& obj){	CHECK_ (Class () == obj.Class ());	const TDListSort& listSort = (const TDListSort&)obj;	SetFlag (TDLISTSORT_FLAG_SORTED, listSort.IsFlag (TDLISTSORT_FLAG_SORTED));	TDList::Copy (obj);}bool TDListSort::CurItem (TObject*& item){		SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::CurItem (item));}void TDListSort::DeleteAll (void){	SetFlag (TDLISTSORT_FLAG_SORTED, true);	TDList::DeleteAll ();}bool TDListSort::FindItem (const TObject& toFind, TObject*& item){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::FindItem (toFind, item));}void TDListSort::ForEach (IterFuncType actionPtr, void* paramListPtr){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	TDList::ForEach (actionPtr, paramListPtr);}bool TDListSort::FirstItem (TObject*& item){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::FirstItem (item));}		bool TDListSort::LastItem (TObject*& item){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::LastItem (item));}bool TDListSort::NextItem (TObject*& item){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::NextItem (item));}TDListSort& TDListSort::operator = (const TDListSort& listSort){	SetFlag (TDLISTSORT_FLAG_SORTED, listSort.IsFlag (TDLISTSORT_FLAG_SORTED));	TDList::operator = (listSort);	return (*this);}bool TDListSort::PrevItem (TObject*& item){	SetFlag (TDLISTSORT_FLAG_SORTED, false);	return (TDList::PrevItem (item));}// replace with insertion sort or something...void TDListSort::Sort (void){	CHECK_ (!IsSorted ());		TDList list;	TObject* obj;	FirstItem ();	while (!IsEmpty ())	{		DetachCurItem (obj);		list.AddItem (obj);	}	list.FirstItem ();	while (!list.IsEmpty ())	{		list.DetachCurItem (obj);		AddItemSort (obj);	}}TDListSort::TDListSort (void){	SetFlag (TDLISTSORT_FLAG_SORTED, true);}TDListSort::TDListSort (const TDListSort& listSort)	: TDList (listSort){	SetFlag (TDLISTSORT_FLAG_SORTED, listSort.IsFlag (TDLISTSORT_FLAG_SORTED));}