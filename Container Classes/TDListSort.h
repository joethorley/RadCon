#ifndef _TDLISTSORT_H#define _TDLISTSORT_H#include "TDList.h"#include "TFlags.h"#define TDLISTSORT_FLAG_SORTED 			0x0001class TDListSort : public TDList, protected TFlags{	public:	    TDListSort (void);	    TDListSort (const TDListSort& list);	    virtual ~TDListSort (void) { };		virtual void							AddItem (const TObject& item) { AddItem (item, true); };		virtual void							AddItem (const TObject& item, const bool direction) { AddItem (item.Clone (), direction); };		virtual void							AddItem (TObject* item) { AddItem (item, true); };		virtual void							AddItem (TObject* item, const bool direction);		virtual void							AddItemSort (const TObject& item) { AddItemSort (item.Clone ()); };		virtual void							AddItemSort (TObject* item);		virtual void							AddItemAtCur (const TObject& item) { AddItemAtCur (item, true); };		virtual void							AddItemAtCur (const TObject& item, const bool direction) { AddItemAtCur (item.Clone (), direction); };		virtual void							AddItemAtCur (TObject* item) { AddItemAtCur (item, true); };		virtual void							AddItemAtCur (TObject* item, const bool direction);		virtual ClassType 						Class (void) const { return ((ClassType)kTDListSortClass); };		virtual TObject*						Clone (void) const { return (new TDListSort (*this)); };		virtual void							Copy (const TObject& obj); 				virtual bool							CurItem (void) const { return (TDList::CurItem ()); };		virtual bool							CurItem (TObject*& item);		virtual bool							CurItem (const TObject*& item) const { return (TDList::CurItem (item)); }; 		virtual void							DeleteAll (void);		virtual bool							FirstItem (void) const { return (TDList::FirstItem ()); };		virtual bool							FirstItem (TObject*& item);		virtual bool							FirstItem (const TObject*& item) const { return (TDList::FirstItem (item)); };		virtual bool							FindItem (const TObject& toFind) const { return (TDList::FindItem (toFind)); };		virtual bool							FindItem (const TObject& toFind, TObject*& item);		virtual bool							FindItem (const TObject& toFind, const TObject*& item) const { return (TDList::FindItem (toFind, item)); }    	virtual void 							ForEach (IterFuncType actionPtr, void* paramListPtr);				virtual bool							IsSorted (void) const { return (IsFlag (TDLISTSORT_FLAG_SORTED)); };				virtual bool							LastItem (void) const { return (TDList::LastItem ()); };		virtual bool							LastItem (TObject*& item);		virtual bool							LastItem (const TObject*& item) const { return (TDList::LastItem (item)); };		virtual bool							NextItem (void) const { return (TDList::NextItem ()); };		virtual bool							NextItem (TObject*& item);		virtual bool							NextItem (const TObject*& item) const { return (TDList::NextItem (item)); };		virtual TDListSort& 					operator = (const TDListSort& list);				virtual bool							PrevItem (void) const { return (TDList::PrevItem ()); };		virtual bool							PrevItem (TObject*& item);		virtual bool							PrevItem (const TObject*& item) const { return (TDList::PrevItem (item)); };				virtual void							Sort (void);};#endif  // _TDLISTSORT_H