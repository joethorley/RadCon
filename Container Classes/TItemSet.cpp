#include "TItemSet.h"int TItemSet::Compare (const TSortable& obj) const{	CHECK (Class () == obj.Class ());	const TItemSet& itemSet = (const TItemSet&)obj;	return (fBitSet.Compare (itemSet.fBitSet));}void TItemSet::Copy (const TObject& obj){	CHECK (Class () == obj.Class ());	const TItemSet& itemSet = (const TItemSet&)obj;	fBitSet.Copy (itemSet.fBitSet);	fName = itemSet.fName;}bool TItemSet::IsEqual (const TObject& obj) const{	CHECK (Class () == obj.Class ());	const TItemSet& itemSet = (const TItemSet&) obj;	return (fBitSet.IsEqual (itemSet.fBitSet));}TItemSet& TItemSet::operator = (const TItemSet& itemSet){	fBitSet = (itemSet.fBitSet);	fName = itemSet.fName;	return (*this);}TItemSet& TItemSet::operator += (const TItemSet& itemSet){	AddToThis (itemSet);	return (*this);}TItemSet& TItemSet::operator += (const unsigned int item){	AddToThis (item);	return (*this);}TItemSet& TItemSet::operator *= (const TItemSet& itemSet){	IntersectWithThis (itemSet);	return (*this);}TItemSet& TItemSet::operator *= (const unsigned int item){	IntersectWithThis (item);	return (*this);}TItemSet& TItemSet::operator -= (const TItemSet& itemSet){	SubtractFromThis (itemSet);	return (*this);}TItemSet& TItemSet::operator -= (const unsigned int item){	SubtractFromThis (item);	return (*this);}		TItemSet TItemSet::operator + (const TItemSet& itemSet) const{	TItemSet s;    Union (itemSet, s);	return (s);}					TItemSet TItemSet::operator * (const TItemSet& itemSet) const{	TItemSet s;    Intersection (itemSet, s);	return (s);}TItemSet TItemSet::operator - (const TItemSet& itemSet) const{	TItemSet s;    SetDifference (itemSet, s);	return (s);}